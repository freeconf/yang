// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	s = strings.Trim(s, " \t\n\r")
	lastChar := len(s) - 1
	if s[0] == char_doublequote && s[lastChar] == char_doublequote {
		return s[1:lastChar]
	}
	if s[0] == char_singlequote && s[lastChar] == char_singlequote {
		return s[1:lastChar]
	}
	return s
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:68
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1596

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1733

var yyAct = [...]int16{
	13, 645, 636, 471, 654, 346, 345, 589, 286, 572,
	407, 476, 549, 272, 311, 529, 413, 536, 45, 403,
	285, 355, 310, 384, 376, 48, 307, 47, 214, 366,
	213, 46, 351, 299, 318, 309, 44, 261, 313, 342,
	169, 43, 240, 42, 41, 229, 254, 221, 330, 40,
	208, 39, 449, 197, 193, 187, 49, 174, 482, 483,
	665, 16, 297, 6, 453, 456, 454, 455, 583, 96,
	5, 75, 11, 669, 170, 204, 26, 435, 185, 180,
	75, 31, 498, 477, 478, 26, 104, 105, 106, 179,
	672, 75, 3, 427, 293, 661, 26, 189, 28, 31,
	172, 177, 171, 620, 618, 619, 617, 28, 633, 192,
	172, 201, 171, 170, 211, 581, 225, 231, 28, 580,
	170, 4, 579, 170, 170, 578, 245, 257, 264, 289,
	303, 303, 577, 321, 170, 333, 27, 344, 354, 369,
	379, 387, 268, 406, 181, 416, 522, 150, 305, 305,
	267, 323, 242, 75, 660, 431, 27, 170, 26, 198,
	349, 348, 397, 273, 246, 202, 399, 372, 398, 371,
	188, 521, 396, 175, 177, 195, 360, 395, 300, 238,
	28, 190, 394, 199, 393, 392, 209, 192, 223, 230,
	391, 337, 390, 315, 616, 520, 615, 201, 243, 255,
	262, 287, 301, 301, 496, 319, 495, 331, 211, 343,
	352, 367, 377, 385, 96, 404, 419, 414, 27, 26,
	205, 225, 270, 184, 312, 312, 470, 326, 469, 231,
	75, 425, 359, 630, 12, 26, 189, 195, 31, 183,
	245, 28, 426, 461, 75, 460, 175, 612, 188, 26,
	430, 202, 182, 607, 257, 26, 605, 28, 434, 190,
	445, 264, 444, 474, 473, 144, 242, 143, 443, 199,
	142, 28, 141, 534, 448, 268, 604, 28, 246, 27,
	209, 475, 459, 267, 75, 525, 289, 451, 452, 26,
	198, 479, 438, 223, 486, 27, 273, 523, 468, 303,
	466, 230, 519, 136, 241, 135, 292, 517, 227, 27,
	472, 28, 243, 514, 195, 27, 512, 305, 321, 134,
	75, 133, 447, 510, 506, 26, 255, 660, 493, 132,
	333, 131, 489, 262, 491, 176, 323, 115, 110, 114,
	109, 490, 344, 191, 100, 200, 99, 28, 210, 27,
	224, 354, 492, 488, 485, 270, 467, 465, 287, 457,
	244, 256, 263, 288, 302, 302, 369, 320, 195, 332,
	442, 301, 353, 368, 378, 386, 379, 405, 494, 415,
	433, 499, 504, 503, 387, 450, 337, 441, 440, 360,
	319, 237, 75, 312, 372, 507, 371, 26, 420, 75,
	511, 168, 331, 406, 26, 397, 167, 513, 176, 399,
	140, 398, 326, 416, 343, 396, 139, 138, 241, 28,
	395, 191, 515, 352, 137, 394, 28, 393, 392, 518,
	130, 200, 129, 391, 269, 390, 308, 308, 367, 325,
	128, 127, 210, 126, 361, 359, 532, 125, 377, 508,
	509, 117, 75, 626, 116, 224, 385, 27, 113, 251,
	108, 75, 565, 567, 539, 544, 474, 473, 98, 538,
	237, 575, 554, 543, 244, 404, 462, 537, 146, 149,
	526, 446, 75, 432, 628, 414, 429, 26, 256, 540,
	551, 428, 422, 124, 546, 263, 118, 592, 112, 627,
	505, 464, 410, 569, 570, 289, 166, 165, 564, 28,
	163, 599, 566, 162, 161, 597, 562, 159, 530, 598,
	288, 582, 158, 584, 585, 603, 157, 156, 586, 532,
	155, 563, 154, 302, 568, 594, 153, 152, 151, 122,
	121, 601, 602, 573, 608, 542, 609, 27, 120, 539,
	544, 52, 320, 611, 538, 119, 94, 606, 543, 554,
	93, 613, 537, 649, 332, 644, 621, 269, 560, 590,
	658, 653, 575, 22, 540, 622, 561, 287, 65, 298,
	64, 629, 317, 316, 66, 353, 271, 260, 259, 592,
	62, 596, 253, 75, 252, 61, 631, 375, 26, 374,
	368, 530, 290, 599, 289, 308, 71, 597, 365, 364,
	378, 598, 486, 70, 207, 206, 33, 638, 386, 648,
	28, 657, 640, 639, 325, 588, 75, 594, 663, 545,
	542, 26, 587, 339, 336, 329, 638, 405, 664, 328,
	556, 640, 639, 67, 573, 648, 667, 415, 383, 382,
	72, 291, 178, 28, 657, 634, 668, 361, 670, 294,
	194, 590, 203, 662, 671, 215, 284, 63, 236, 641,
	635, 559, 557, 349, 348, 555, 287, 247, 553, 552,
	531, 314, 314, 596, 327, 550, 338, 643, 347, 637,
	373, 646, 400, 655, 409, 548, 418, 547, 248, 239,
	258, 274, 295, 60, 362, 574, 349, 348, 637, 673,
	350, 356, 674, 381, 545, 69, 212, 646, 402, 401,
	73, 571, 275, 341, 423, 178, 655, 556, 68, 412,
	265, 591, 304, 304, 411, 322, 74, 334, 194, 288,
	357, 370, 380, 388, 535, 408, 97, 417, 203, 75,
	75, 235, 234, 233, 26, 26, 232, 541, 228, 215,
	35, 533, 528, 531, 527, 226, 222, 220, 219, 34,
	51, 101, 102, 103, 50, 107, 28, 28, 111, 266,
	236, 306, 306, 38, 324, 37, 335, 437, 437, 358,
	436, 247, 389, 340, 196, 90, 30, 186, 29, 173,
	23, 216, 283, 595, 36, 123, 574, 21, 20, 19,
	212, 643, 75, 18, 27, 17, 15, 26, 14, 10,
	9, 75, 148, 591, 8, 2, 26, 258, 217, 218,
	349, 348, 1, 160, 274, 85, 76, 164, 288, 28,
	80, 79, 541, 89, 77, 78, 81, 145, 28, 82,
	314, 147, 87, 647, 0, 656, 88, 83, 84, 295,
	0, 0, 0, 265, 216, 0, 0, 90, 0, 327,
	91, 0, 92, 216, 0, 86, 0, 27, 610, 647,
	0, 338, 75, 251, 666, 250, 27, 26, 656, 278,
	0, 281, 0, 347, 0, 595, 0, 0, 0, 0,
	0, 304, 279, 0, 0, 276, 277, 0, 0, 28,
	75, 0, 266, 0, 0, 26, 0, 373, 0, 0,
	322, 652, 0, 0, 356, 0, 0, 0, 0, 0,
	86, 75, 334, 0, 216, 400, 26, 28, 251, 249,
	250, 0, 0, 0, 278, 437, 437, 27, 0, 381,
	306, 0, 0, 357, 409, 0, 0, 279, 28, 0,
	276, 277, 216, 439, 418, 0, 75, 0, 370, 324,
	0, 26, 0, 0, 0, 27, 0, 0, 380, 278,
	0, 335, 75, 216, 283, 86, 388, 26, 0, 0,
	0, 250, 279, 28, 249, 278, 27, 463, 75, 75,
	0, 0, 358, 26, 26, 408, 0, 282, 279, 28,
	524, 276, 277, 558, 0, 417, 0, 0, 216, 283,
	86, 0, 576, 0, 0, 28, 28, 480, 481, 0,
	484, 27, 0, 0, 216, 389, 86, 652, 251, 0,
	250, 0, 0, 487, 278, 0, 281, 27, 600, 410,
	216, 216, 0, 0, 0, 0, 0, 279, 0, 0,
	276, 277, 0, 27, 27, 0, 75, 0, 458, 0,
	0, 26, 0, 251, 0, 250, 0, 0, 295, 0,
	0, 0, 0, 0, 75, 86, 421, 497, 7, 26,
	53, 0, 31, 28, 249, 500, 501, 0, 85, 593,
	558, 0, 0, 80, 79, 56, 89, 77, 78, 81,
	0, 28, 82, 0, 0, 87, 0, 54, 55, 88,
	83, 84, 0, 576, 0, 0, 24, 25, 0, 249,
	90, 27, 0, 91, 0, 92, 0, 0, 86, 32,
	600, 57, 0, 0, 0, 0, 75, 0, 424, 27,
	0, 26, 0, 0, 58, 0, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 59,
	651, 75, 659, 28, 0, 0, 26, 295, 251, 0,
	250, 0, 0, 0, 0, 0, 0, 642, 0, 0,
	0, 593, 0, 0, 0, 75, 651, 95, 28, 7,
	26, 53, 0, 31, 0, 659, 0, 0, 0, 85,
	0, 27, 0, 0, 80, 79, 56, 89, 77, 78,
	81, 650, 28, 82, 0, 0, 87, 0, 54, 55,
	88, 83, 84, 0, 249, 0, 27, 24, 25, 75,
	0, 90, 0, 0, 91, 0, 92, 650, 0, 86,
	32, 0, 57, 85, 0, 0, 0, 0, 80, 79,
	27, 89, 77, 78, 81, 58, 0, 82, 0, 0,
	87, 0, 0, 0, 88, 83, 84, 0, 0, 0,
	59, 0, 0, 0, 0, 90, 0, 0, 91, 0,
	92, 0, 0, 86, 0, 75, 0, 0, 614, 7,
	26, 53, 0, 31, 0, 0, 0, 0, 0, 85,
	0, 623, 624, 625, 80, 79, 56, 89, 77, 78,
	81, 0, 28, 82, 0, 0, 87, 0, 54, 55,
	88, 83, 84, 0, 0, 0, 0, 24, 25, 0,
	0, 90, 0, 0, 91, 0, 92, 0, 0, 86,
	32, 0, 57, 0, 0, 0, 0, 0, 0, 75,
	27, 0, 0, 0, 26, 58, 0, 0, 0, 0,
	0, 280, 278, 85, 281, 0, 0, 0, 80, 79,
	59, 89, 77, 78, 81, 279, 28, 82, 276, 277,
	87, 0, 0, 0, 88, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 91, 0,
	92, 216, 283, 86, 75, 0, 632, 0, 0, 26,
	0, 0, 0, 0, 27, 0, 0, 278, 85, 0,
	0, 0, 0, 80, 79, 282, 89, 77, 78, 81,
	279, 28, 82, 0, 0, 87, 0, 0, 0, 88,
	83, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 91, 0, 92, 216, 283, 86, 0,
	0, 75, 0, 0, 0, 0, 26, 0, 0, 27,
	0, 0, 0, 296, 278, 85, 0, 0, 0, 0,
	80, 79, 0, 89, 77, 78, 81, 279, 28, 82,
	0, 0, 87, 0, 0, 0, 88, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	91, 0, 92, 216, 283, 86, 0, 0, 75, 0,
	502, 0, 0, 26, 0, 0, 27, 250, 0, 0,
	296, 278, 85, 0, 0, 0, 0, 80, 79, 0,
	89, 77, 78, 81, 279, 28, 82, 0, 0, 87,
	363, 0, 0, 88, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 91, 75, 92,
	216, 283, 86, 26, 0, 0, 0, 250, 0, 0,
	0, 278, 85, 27, 0, 0, 0, 80, 79, 0,
	89, 77, 78, 81, 279, 28, 82, 0, 0, 87,
	363, 0, 0, 88, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 91, 75, 92,
	216, 283, 86, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 27, 0, 0, 0, 80, 79, 0,
	89, 77, 78, 81, 0, 28, 82, 0, 0, 87,
	0, 0, 0, 88, 83, 84, 0, 75, 0, 0,
	0, 0, 26, 0, 90, 0, 0, 91, 0, 92,
	0, 85, 86, 0, 0, 0, 80, 79, 0, 89,
	0, 0, 81, 27, 28, 82, 0, 0, 87, 363,
	0, 0, 88, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 27,
}

var yyPact = [...]int16{
	67, -1000, 1288, 556, 552, 1188, -1000, 463, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 336, 463, 463, 463, 13, 463, 452,
	330, 463, 493, 450, 329, 446, 443, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 491, 551, 544, 536, 535, 463, 488,
	439, 435, 433, 432, 424, 422, 321, 311, 295, 416,
	409, 408, 402, 262, 257, 473, 1288, 534, 533, 532,
	528, 526, 523, 522, 518, 513, 463, 510, 509, 506,
	463, 503, 502, 398, 393, -1000, -1000, 102, -1000, -1000,
	385, 79, 69, 102, 242, 229, 213, 68, 223, -1000,
	277, 65, 210, 805, -1000, 243, 392, 66, -1000, -1000,
	-1000, -1000, -1000, 19, -1000, 1164, 1621, 1352, 1464, 924,
	924, -1000, 959, -1000, 742, -1000, 586, 1571, 805, 814,
	1660, -1000, 992, -1000, 903, 206, 390, -1000, 19, -1000,
	1077, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19, -1000, -1000, -1000, 19, -1000, -1000, -1000, -1000, -1000,
	487, -1000, 454, 1139, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 84, -1000, -1000, 486,
	-1000, -1000, -1000, -1000, -1000, 481, 146, -1000, 478, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 371, 805, -1000, -1000,
	-1000, -1000, -1000, 1232, 1232, -1000, 463, 380, 379, 361,
	243, -1000, -1000, -1000, -1000, -1000, 252, 476, 313, -1000,
	-1000, -1000, -1000, 377, 377, 377, -1000, -15, 350, 1059,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 235, 471,
	463, 497, 348, 1621, -1000, -1000, -1000, -1000, -1000, 347,
	1352, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 218, 258, 461, 36, 36,
	463, 463, -26, 463, 345, 1464, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 463, 344, 924, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 332, 325, 959, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 319, 742,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 196,
	463, 73, -1000, -1000, -1000, -1000, -1000, -1000, 463, 463,
	1521, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 374, 496, 315, 805, -1000, -1000, -1000, -1000,
	-1000, 1232, 1232, -1000, 314, 814, -1000, -1000, -1000, -1000,
	-1000, -1000, 307, 1660, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 304, 992, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	463, 298, 903, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 293, -1000, -1000, -1000, -1000, 185, 161,
	-1000, -1000, 136, -1000, -1000, 288, 1232, -1000, 276, 102,
	-1000, -1000, -1000, -1000, -1000, 207, -1000, -1000, -1000, -1000,
	1024, -1000, -1000, 92, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 445, 92, 102, -1000, -1000, -1000, -1000, -1000, -1000,
	385, 122, 115, -1000, -1000, 112, 109, -1000, -1000, 105,
	102, 58, 92, 92, 19, -1000, -1000, 102, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 975, 19, -1000, -1000,
	102, 102, -1000, -1000, 1464, -1000, -1000, -1000, 267, 247,
	-1000, -1000, -1000, -1000, -1000, -1000, 102, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 244, 207, -1000,
	-1000, -1000, -1000, -1000, 36, 869, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 238, 445, -1000,
	-1000, 463, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 186,
	96, 95, 461, 36, 463, 463, 463, 448, 495, -1000,
	-1000, 475, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 224, 975, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1407, -1000, -1000, -1000, -1000, -1000, 98,
	-1000, -1000, -1000, -1000, 102, -1000, 743, -1000, 991, -1000,
	237, 85, 92, 19, 19, 19, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 619, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -9, 875, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 461, 64, -1000, -1000, -1000, -1000, -1000, -1000,
	461, -1000, -1000, -1000, -1000, 80, -1000, -1000, 92, -1000,
	-1000, 92, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 11, 3, 851, 746, 847, 551, 836, 40, 832,
	825, 70, 63, 824, 820, 819, 72, 234, 0, 818,
	816, 61, 815, 813, 809, 808, 807, 573, 804, 800,
	799, 57, 798, 797, 55, 54, 796, 794, 53, 77,
	790, 785, 783, 51, 49, 44, 43, 41, 36, 18,
	31, 27, 25, 56, 774, 770, 769, 768, 767, 47,
	766, 765, 764, 762, 15, 761, 760, 758, 45, 756,
	753, 52, 752, 751, 744, 17, 26, 13, 38, 306,
	94, 22, 14, 178, 736, 734, 729, 16, 602, 728,
	723, 39, 6, 5, 722, 651, 721, 9, 720, 719,
	718, 19, 10, 715, 710, 32, 21, 704, 20, 703,
	699, 42, 698, 697, 695, 12, 685, 679, 678, 675,
	672, 671, 670, 2, 669, 667, 666, 8, 659, 650,
	649, 648, 23, 643, 639, 635, 48, 634, 633, 7,
	632, 625, 616, 615, 614, 50, 30, 28, 613, 609,
	608, 29, 606, 599, 597, 24, 595, 594, 592, 46,
	590, 588, 587, 37, 586, 35, 584, 583, 582, 34,
	580, 62, 579, 33, 578, 576, 571, 4, 570, 568,
	565, 1, 563,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 31, 31, 32, 33, 33, 21, 34, 34, 34,
	34, 34, 34, 34, 19, 36, 37, 37, 38, 38,
	38, 38, 38, 38, 20, 20, 35, 39, 39, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 40, 40, 24, 24, 56,
	57, 57, 58, 58, 59, 59, 59, 59, 60, 60,
	61, 62, 62, 63, 63, 64, 64, 64, 64, 65,
	25, 66, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 70, 72, 73, 71, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 55, 55, 84,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 49,
	49, 89, 90, 90, 91, 91, 91, 91, 91, 92,
	93, 88, 94, 95, 95, 96, 96, 97, 97, 97,
	97, 54, 54, 98, 99, 99, 100, 100, 101, 101,
	101, 101, 101, 101, 102, 50, 104, 104, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 103, 106,
	107, 41, 109, 110, 110, 111, 111, 111, 111, 111,
	111, 111, 3, 3, 78, 83, 83, 112, 113, 113,
	114, 114, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 121, 121, 121, 122, 122, 123, 123,
	123, 123, 123, 123, 124, 120, 17, 17, 17, 119,
	44, 125, 126, 126, 108, 108, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 129, 53, 130, 130,
	131, 131, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 133, 48,
	48, 134, 134, 135, 135, 136, 136, 136, 136, 136,
	136, 136, 136, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 137, 137, 140, 141, 141,
	23, 142, 143, 143, 144, 144, 145, 145, 145, 145,
	145, 145, 145, 146, 147, 51, 148, 149, 149, 150,
	150, 151, 151, 151, 151, 151, 151, 151, 52, 152,
	153, 153, 154, 154, 155, 155, 155, 155, 155, 42,
	156, 157, 157, 158, 158, 159, 159, 159, 159, 43,
	160, 161, 162, 162, 81, 81, 82, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	165, 165, 164, 77, 47, 47, 167, 168, 168, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 166, 166,
	45, 170, 171, 172, 172, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	80, 4, 4, 2, 2, 1, 1, 79, 46, 174,
	118, 118, 175, 176, 176, 177, 177, 177, 177, 177,
	178, 117, 117, 179, 180, 180, 181, 181, 181, 181,
	181, 181, 182, 16, 18, 14, 15, 22, 76, 8,
	8, 6, 6, 7, 5, 5,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 3, 1, 3, 1,
	1, 1, 1, 1, 4, 2, 1, 2, 3, 1,
	1, 1, 1, 1, 2, 4, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 2, 1, 2, 1, 1, 1, 2, 2, 2,
	1, 3, 2, 2, 2, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 2, 2, 4, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 2, 0, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 2,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 2, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 3, 3, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 4,
	2, 1, 1, 2, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 2, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 2,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 3, 3, 3, 0, 1,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -32,
	-36, 15, 62, -142, -56, -66, -28, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -6, 13, 40, 41, 28, 64, 77, 92,
	-109, -156, -160, -125, -170, -174, -166, -133, -89, -103,
	-148, -152, -129, -98, -84, 7, -7, 30, 31, 27,
	26, 32, 35, 43, 44, 21, 61, 38, 42, 29,
	53, 56, 58, 4, 4, 9, -12, -4, 5, 10,
	8, -4, -4, -4, 73, 74, 75, -4, 8, 10,
	8, -4, 5, 8, 10, 8, 8, 8, 5, 4,
	4, 4, 4, -4, 5, 8, 8, 8, 8, 8,
	8, 10, 8, 10, 8, 10, 8, 8, 8, 8,
	8, 10, 8, 10, 8, -5, 5, -3, -4, 6,
	-11, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	-4, 4, 4, 4, -4, 4, 4, 8, 8, -8,
	55, 10, 8, -30, -31, -16, -17, -18, -6, 10,
	10, -8, 10, 10, 10, 10, -33, -34, -21, 13,
	-16, -17, -18, -35, -6, 91, -37, -38, 13, -16,
	-17, -18, -35, -6, 10, 10, -143, -144, -145, -16,
	-17, -18, -88, -146, -147, -6, 59, 23, 24, -57,
	-58, -59, -60, -16, -17, -18, -61, 65, -67, -68,
	-16, -18, -69, -70, -72, -73, -6, 78, -21, -110,
	-111, -83, -76, -16, -17, -18, -78, -6, -112, 70,
	16, 14, -157, -158, -159, -16, -17, -18, -27, -161,
	-162, -163, -16, -17, -18, -88, -95, -81, -82, -79,
	-80, -164, -77, -165, -27, -94, 36, 37, 20, 33,
	19, 22, 83, 60, -126, -108, -127, -16, -17, -18,
	-88, -95, -79, -80, -128, -27, 76, -171, -172, -173,
	-83, -16, -17, -18, -88, -49, -95, -76, -79, -165,
	-81, -82, -80, -78, -6, -171, -167, -168, -169, -16,
	-17, -18, -88, -49, -95, -79, -80, -6, -134, -135,
	-136, -16, -17, -18, -88, -95, -137, -53, -6, -138,
	51, -90, -91, -16, -18, -92, -93, -6, 88, 87,
	-104, -105, -16, -17, -18, -106, -27, -88, -95, -80,
	-78, -79, -107, 39, -149, -150, -151, -16, -17, -18,
	-88, -146, -147, -6, -153, -154, -155, -16, -17, -18,
	-88, -27, -130, -131, -132, -16, -17, -18, -88, -95,
	-43, -44, -45, -46, -47, -48, -50, -106, -51, -52,
	-6, -99, -100, -101, -16, -17, -18, -102, -88, -6,
	57, -85, -86, -87, -16, -17, -18, -88, -6, 10,
	8, 9, 5, -6, 9, -31, -34, 9, 5, 5,
	-38, 9, 5, 9, -145, -39, -40, -27, -39, -4,
	8, 8, 9, -59, 10, 8, 5, 9, -68, -71,
	8, -71, -71, 79, 81, 82, 80, 9, 9, -111,
	10, 8, 5, -4, 4, 9, -159, 9, -163, 10,
	8, -2, 52, 6, 5, -2, -1, 47, 48, -1,
	-4, -4, 84, 85, -4, 9, -127, -4, 9, -173,
	9, 9, -169, 9, -136, 10, 8, -4, 9, -91,
	-4, -4, 9, -105, 8, 4, 9, -151, -39, -39,
	9, -155, 9, -132, 9, -101, -4, 9, -87, 9,
	10, 10, 10, 9, -27, 9, -8, -62, -63, -64,
	-16, -17, -18, -65, 66, -74, -75, -76, -49, -77,
	-78, -79, -80, -81, -82, -83, -8, -113, -114, -115,
	-116, 45, -117, -118, -102, -119, -83, -120, -6, -121,
	-179, -175, 71, 86, 63, 17, 67, 18, 89, -8,
	-8, -96, -97, -16, -17, -18, -6, 10, 10, 10,
	10, 10, -8, 10, -8, -8, -8, -140, -141, -139,
	-16, -17, -18, -88, -78, -79, -80, -49, -81, -82,
	-6, -8, -8, -108, 9, 9, -8, 9, -64, -1,
	9, -75, 9, -115, -4, 10, 8, 10, 8, 10,
	8, -2, -1, -4, -4, -4, 5, 4, 9, -97,
	9, -139, 9, 10, -8, -122, -123, -16, -18, -92,
	-93, -124, -6, 68, -180, -181, -16, -17, -18, -182,
	-88, -6, 46, -176, -177, -16, -17, -18, -178, -6,
	90, 10, -8, 9, -123, 69, 9, -181, -2, 9,
	-177, -2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 5, 0, 421, 25,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 312, 77, 80, 0, 0, 24, 33,
	45, 311, 79, 101, 22, 0, 351, 0, 242, 0,
	0, 384, 0, 279, 281, 139, 0, 0, 327, 340,
	258, 161, 164, 127, 130, 0, 421, 465, 202, 203,
	0, 192, 350, 360, 241, 401, 429, 398, 399, 278,
	141, 188, 326, 339, 256, 163, 129, 2, 3, 6,
	0, 459, 0, 0, 27, 29, 30, 31, 32, 455,
	456, 453, 236, 237, 238, 454, 0, 34, 37, 0,
	39, 40, 41, 42, 43, 0, 0, 46, 0, 49,
	50, 51, 52, 53, 36, 457, 0, 313, 314, 316,
	317, 318, 319, 57, 57, 322, 0, 0, 0, 0,
	81, 82, 84, 85, 86, 87, 0, 0, 0, 102,
	104, 105, 106, 0, 0, 0, 110, 0, 0, 0,
	193, 195, 196, 197, 198, 199, 200, 201, 0, 0,
	0, 0, 0, 352, 353, 355, 356, 357, 358, 0,
	361, 362, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 244, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 0, 0, 402, 403,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 0, 0, 386, 387, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 0, 282,
	283, 285, 286, 287, 288, 289, 290, 291, 292, 0,
	0, 0, 142, 144, 145, 146, 147, 148, 0, 0,
	0, 176, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 0, 0, 0, 328, 329, 331, 332, 333,
	334, 57, 57, 337, 0, 341, 342, 344, 345, 346,
	347, 348, 0, 259, 260, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 0, 165, 166, 168, 169, 170, 171, 172, 173,
	0, 0, 131, 132, 134, 135, 136, 137, 138, 461,
	463, 462, 422, 0, 26, 28, 35, 44, 0, 0,
	47, 55, 0, 310, 315, 0, 58, 75, 0, 0,
	323, 324, 78, 83, 88, 91, 90, 100, 103, 107,
	0, 108, 109, 0, 112, 113, 114, 23, 191, 194,
	205, 208, 0, 0, 207, 349, 354, 359, 363, 153,
	0, 0, 0, 423, 424, 0, 0, 425, 426, 0,
	0, 0, 0, 0, 152, 240, 245, 0, 400, 404,
	428, 385, 388, 280, 284, 305, 0, 293, 140, 143,
	0, 0, 175, 177, 0, 190, 325, 330, 0, 0,
	338, 343, 257, 261, 162, 167, 0, 128, 133, 460,
	38, 56, 48, 320, 76, 321, 151, 0, 92, 93,
	95, 96, 97, 98, 0, 0, 116, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 111, 0, 209, 210,
	212, 0, 214, 215, 216, 217, 218, 219, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 458,
	204, 0, 155, 157, 158, 159, 160, 364, 365, 366,
	427, 420, 382, 383, 380, 381, 255, 0, 307, 308,
	294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 149, 150, 0, 335, 336, 174, 89, 94, 0,
	115, 117, 206, 211, 0, 221, 0, 441, 0, 430,
	0, 0, 0, 223, 224, 225, 443, 432, 154, 156,
	306, 309, 189, 99, 213, 0, 226, 228, 229, 230,
	231, 232, 233, 0, 0, 444, 446, 447, 448, 449,
	450, 451, 0, 0, 433, 435, 436, 437, 438, 439,
	0, 239, 235, 222, 227, 0, 442, 445, 0, 431,
	434, 0, 234, 452, 440,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.builder.Submodule(l.parent, yyDollar[2].token, l.featureSet))
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:237
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:246
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:251
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:260
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:263
		{
			yylex.(*lexer).stack.pop()
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:278
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:291
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:309
		{
			yylex.(*lexer).stack.pop()
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:314
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:335
		{
			yylex.(*lexer).stack.pop()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:338
		{
			yylex.(*lexer).stack.pop()
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:343
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			yylex.(*lexer).stack.pop()
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:377
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:382
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:404
		{
			yylex.(*lexer).stack.pop()
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:407
		{
			yylex.(*lexer).stack.pop()
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:412
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:434
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:443
		{
			yylex.(*lexer).stack.pop()
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:448
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:485
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:494
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:503
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:512
		{
			yylex.(*lexer).stack.pop()
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:535
		{
			yylex.(*lexer).stack.pop()
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			yylex.(*lexer).stack.pop()
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:570
		{
			yylex.(*lexer).stack.pop()
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:594
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:603
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:612
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:621
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:630
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:633
		{
			yylex.(*lexer).stack.pop()
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:647
		{
			yylex.(*lexer).stack.pop()
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:650
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:679
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:688
		{
			yylex.(*lexer).stack.pop()
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:709
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:718
		{
			yylex.(*lexer).stack.pop()
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:732
		{
			yylex.(*lexer).stack.pop()
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:737
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:758
		{
			yyVAL.token = yyDollar[1].token
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:759
		{
			yyVAL.token = yyDollar[1].token
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yylex.(*lexer).stack.pop()
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:774
		{
			yylex.(*lexer).stack.pop()
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:779
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:796
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:812
		{
			yylex.(*lexer).stack.pop()
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:815
		{
			yylex.(*lexer).stack.pop()
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:820
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:834
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:860
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:874
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:883
		{
			yylex.(*lexer).stack.pop()
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:888
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:916
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:925
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:934
		{
			yylex.(*lexer).stack.pop()
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:964
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:973
		{
			yylex.(*lexer).stack.pop()
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:976
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:998
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yylex.(*lexer).stack.pop()
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1024
		{
			yylex.(*lexer).stack.pop()
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yylex.(*lexer).stack.pop()
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1061
		{
			yylex.(*lexer).stack.pop()
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1064
		{
			yylex.(*lexer).stack.pop()
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1079
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1091
		{
			yylex.(*lexer).stack.pop()
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1096
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1116
		{
			yylex.(*lexer).stack.pop()
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yylex.(*lexer).stack.pop()
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1128
		{
			yylex.(*lexer).stack.pop()
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1133
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1157
		{
			yylex.(*lexer).stack.pop()
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1162
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1184
		{
			yylex.(*lexer).stack.pop()
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1213
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1222
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1247
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1254
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1263
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1272
		{
			l := yylex.(*lexer)
			l.builder.Unique(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1281
		{
			yylex.(*lexer).stack.pop()
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1284
		{
			yylex.(*lexer).stack.pop()
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1308
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1315
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1324
		{
			yylex.(*lexer).stack.pop()
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1329
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1365
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1374
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1377
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1382
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1390
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1401
		{
			yyVAL.boolean = true
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1402
		{
			yyVAL.boolean = false
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1405
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1417
		{
			yylex.(*lexer).stack.pop()
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1422
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1431
		{
			yylex.(*lexer).stack.pop()
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1434
		{
			yylex.(*lexer).stack.pop()
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1439
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1458
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1467
		{
			yylex.(*lexer).stack.pop()
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1470
		{
			yylex.(*lexer).stack.pop()
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1475
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1495
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1504
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1513
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1522
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1531
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1540
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1549
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.ext = nil
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1561
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.stack.pop().(*meta.Extension)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1581
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			l.stack.push(yyVAL.ext)
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1591
		{
			yyVAL.token = ""
		}
	}
	goto yystack /* stack new state and value */
}
