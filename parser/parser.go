// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422
const kywd_ordered_by = 57423
const kywd_system = 57424
const kywd_user = 57425
const kywd_require_instance = 57426
const kywd_error_app_tag = 57427
const kywd_error_message = 57428
const kywd_bit = 57429
const kywd_position = 57430

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1537

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1547

var yyAct = [...]int16{
	280, 620, 455, 13, 572, 628, 13, 331, 555, 277,
	330, 263, 519, 512, 393, 276, 344, 460, 298, 399,
	532, 284, 420, 389, 206, 302, 46, 45, 370, 362,
	352, 340, 44, 290, 42, 319, 41, 40, 245, 252,
	221, 39, 301, 213, 38, 159, 200, 231, 300, 190,
	16, 182, 434, 278, 466, 467, 11, 169, 37, 11,
	72, 165, 89, 635, 205, 613, 47, 25, 616, 288,
	438, 441, 439, 440, 564, 89, 89, 637, 432, 595,
	25, 25, 304, 101, 102, 103, 167, 3, 166, 27,
	461, 462, 89, 563, 611, 487, 566, 25, 172, 562,
	561, 422, 27, 27, 21, 196, 187, 21, 194, 560,
	167, 203, 166, 217, 223, 180, 4, 505, 603, 27,
	602, 236, 248, 255, 504, 294, 294, 601, 310, 600,
	322, 229, 333, 343, 355, 365, 373, 197, 392, 233,
	402, 165, 283, 179, 261, 229, 303, 303, 259, 315,
	165, 170, 383, 338, 337, 26, 183, 165, 358, 185,
	165, 192, 385, 384, 201, 258, 215, 222, 382, 172,
	381, 264, 380, 379, 234, 246, 253, 378, 292, 292,
	377, 308, 187, 320, 164, 332, 341, 353, 363, 371,
	194, 390, 178, 400, 376, 306, 326, 177, 357, 291,
	203, 89, 175, 237, 407, 25, 174, 43, 599, 435,
	598, 458, 457, 217, 89, 610, 481, 590, 479, 25,
	478, 223, 170, 249, 265, 286, 411, 27, 409, 423,
	588, 236, 183, 412, 345, 185, 367, 89, 587, 415,
	508, 27, 25, 192, 506, 248, 419, 165, 454, 233,
	453, 165, 255, 201, 503, 89, 428, 641, 456, 517,
	25, 433, 500, 26, 27, 260, 215, 299, 299, 497,
	314, 459, 495, 261, 222, 493, 89, 259, 443, 436,
	437, 25, 27, 450, 234, 176, 470, 447, 463, 489,
	294, 452, 338, 337, 258, 476, 475, 593, 246, 474,
	264, 89, 242, 27, 241, 253, 25, 184, 269, 30,
	272, 303, 445, 237, 444, 338, 337, 472, 26, 322,
	232, 270, 469, 473, 267, 268, 451, 430, 27, 429,
	449, 333, 296, 296, 427, 312, 634, 418, 482, 26,
	343, 405, 139, 292, 138, 137, 249, 136, 131, 82,
	130, 426, 355, 265, 477, 425, 240, 634, 406, 129,
	279, 128, 365, 12, 26, 127, 12, 126, 163, 162,
	373, 486, 320, 112, 89, 111, 358, 135, 286, 25,
	491, 492, 490, 89, 332, 326, 383, 25, 25, 392,
	242, 494, 241, 341, 260, 134, 385, 384, 496, 402,
	133, 27, 382, 132, 381, 353, 380, 379, 125, 27,
	27, 378, 498, 50, 377, 363, 357, 107, 501, 106,
	97, 124, 96, 371, 396, 123, 208, 122, 376, 502,
	232, 515, 299, 157, 95, 161, 121, 26, 120, 113,
	219, 345, 390, 110, 240, 26, 26, 522, 105, 458,
	457, 609, 400, 6, 520, 558, 95, 525, 171, 93,
	537, 527, 446, 367, 431, 89, 186, 442, 193, 417,
	25, 202, 242, 216, 241, 95, 161, 414, 526, 408,
	575, 235, 247, 254, 513, 293, 293, 114, 309, 109,
	321, 499, 27, 342, 354, 364, 372, 296, 391, 488,
	401, 579, 448, 586, 155, 582, 154, 152, 556, 151,
	150, 173, 515, 148, 147, 146, 145, 144, 523, 188,
	143, 195, 581, 507, 207, 591, 240, 228, 26, 171,
	522, 594, 142, 573, 238, 592, 141, 520, 305, 305,
	525, 316, 186, 327, 527, 336, 537, 359, 604, 386,
	193, 395, 596, 404, 140, 558, 118, 117, 116, 160,
	202, 526, 577, 612, 605, 513, 115, 94, 91, 90,
	624, 281, 575, 216, 619, 543, 614, 632, 524, 627,
	544, 62, 173, 98, 99, 100, 289, 104, 61, 286,
	108, 235, 307, 579, 63, 188, 470, 582, 262, 251,
	333, 523, 623, 195, 631, 247, 250, 59, 556, 509,
	618, 244, 254, 207, 581, 243, 119, 282, 58, 333,
	623, 639, 578, 529, 361, 573, 482, 360, 631, 640,
	68, 552, 553, 642, 228, 528, 351, 643, 350, 67,
	199, 198, 149, 521, 238, 539, 153, 32, 571, 565,
	293, 567, 568, 332, 577, 621, 569, 629, 89, 570,
	328, 524, 89, 25, 410, 89, 325, 25, 584, 585,
	25, 89, 332, 621, 209, 210, 25, 318, 317, 321,
	64, 629, 204, 369, 589, 27, 368, 580, 286, 27,
	69, 285, 27, 275, 256, 60, 295, 295, 27, 311,
	342, 323, 542, 305, 346, 356, 366, 374, 540, 394,
	208, 403, 354, 538, 578, 329, 536, 86, 528, 535,
	533, 26, 364, 208, 274, 26, 521, 531, 26, 530,
	372, 539, 327, 239, 26, 230, 89, 57, 348, 339,
	257, 25, 297, 297, 336, 313, 66, 324, 388, 391,
	347, 89, 387, 375, 70, 554, 25, 266, 335, 401,
	241, 334, 65, 27, 269, 359, 398, 89, 424, 413,
	397, 204, 25, 184, 71, 30, 518, 270, 27, 580,
	267, 268, 617, 386, 227, 226, 89, 225, 208, 224,
	636, 514, 220, 242, 27, 34, 548, 550, 242, 26,
	241, 516, 395, 208, 269, 82, 272, 511, 510, 218,
	214, 212, 404, 211, 26, 557, 33, 270, 49, 48,
	267, 268, 36, 256, 534, 644, 35, 421, 645, 189,
	26, 464, 465, 29, 468, 181, 396, 28, 168, 22,
	574, 20, 547, 19, 18, 82, 549, 471, 545, 17,
	15, 89, 240, 14, 10, 9, 25, 89, 242, 541,
	241, 295, 25, 546, 269, 8, 551, 5, 559, 257,
	2, 1, 514, 158, 89, 156, 0, 270, 27, 25,
	267, 268, 0, 89, 27, 638, 89, 269, 25, 480,
	323, 25, 191, 583, 0, 0, 626, 483, 484, 0,
	270, 27, 0, 208, 274, 82, 0, 297, 0, 0,
	27, 346, 240, 27, 26, 557, 0, 0, 0, 0,
	26, 0, 626, 356, 0, 273, 208, 274, 82, 89,
	0, 416, 574, 366, 25, 191, 324, 26, 0, 0,
	0, 374, 0, 0, 0, 541, 26, 89, 0, 26,
	0, 0, 25, 0, 0, 0, 27, 347, 0, 0,
	394, 81, 622, 0, 630, 0, 76, 75, 559, 85,
	403, 0, 77, 0, 27, 78, 0, 0, 83, 349,
	622, 0, 84, 79, 80, 583, 0, 375, 630, 0,
	0, 0, 26, 0, 0, 0, 0, 0, 0, 208,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	26, 0, 0, 336, 0, 625, 0, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 336, 625, 0, 25, 0, 0, 0, 0,
	0, 633, 271, 269, 81, 272, 0, 0, 0, 76,
	75, 576, 85, 73, 74, 77, 270, 27, 78, 267,
	268, 83, 0, 0, 0, 84, 79, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 87,
	0, 88, 208, 274, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 606, 607, 608,
	0, 89, 0, 92, 0, 7, 25, 51, 0, 30,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	76, 75, 54, 85, 73, 74, 77, 0, 27, 78,
	0, 0, 83, 576, 52, 53, 84, 79, 80, 0,
	0, 0, 0, 23, 24, 0, 0, 86, 0, 0,
	87, 0, 88, 0, 0, 82, 31, 89, 55, 0,
	0, 7, 25, 51, 26, 30, 0, 0, 0, 56,
	0, 81, 0, 0, 0, 0, 76, 75, 54, 85,
	73, 74, 77, 0, 27, 78, 0, 0, 83, 0,
	52, 53, 84, 79, 80, 0, 0, 0, 0, 23,
	24, 0, 0, 86, 0, 0, 87, 0, 88, 0,
	0, 82, 31, 89, 55, 615, 0, 0, 25, 0,
	26, 0, 0, 0, 0, 56, 269, 81, 0, 0,
	0, 0, 76, 75, 0, 85, 73, 74, 77, 270,
	27, 78, 0, 0, 83, 0, 0, 0, 84, 79,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 87, 0, 88, 208, 274, 82, 89, 0,
	0, 0, 0, 25, 0, 0, 26, 0, 0, 0,
	287, 269, 81, 0, 0, 0, 0, 76, 75, 0,
	85, 73, 74, 77, 270, 27, 78, 0, 0, 83,
	0, 0, 0, 84, 79, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 87, 0, 88,
	208, 274, 82, 89, 0, 485, 0, 0, 25, 0,
	0, 26, 0, 0, 0, 287, 0, 81, 0, 0,
	0, 0, 76, 75, 0, 85, 73, 74, 77, 0,
	27, 78, 0, 0, 83, 349, 0, 0, 84, 79,
	80, 0, 0, 0, 0, 89, 0, 0, 0, 86,
	25, 0, 87, 0, 88, 208, 274, 82, 0, 81,
	0, 0, 0, 0, 76, 75, 26, 85, 73, 74,
	77, 0, 27, 78, 0, 0, 83, 349, 0, 0,
	84, 79, 80, 0, 0, 0, 0, 89, 0, 0,
	0, 86, 25, 0, 87, 0, 88, 208, 274, 82,
	0, 81, 0, 0, 0, 0, 76, 75, 26, 85,
	73, 74, 77, 0, 27, 78, 0, 0, 83, 0,
	0, 0, 84, 79, 80, 0, 0, 0, 0, 89,
	0, 0, 0, 86, 25, 0, 87, 0, 88, 208,
	0, 82, 0, 81, 0, 0, 0, 0, 76, 75,
	26, 85, 73, 74, 77, 0, 27, 78, 0, 0,
	83, 0, 89, 0, 84, 79, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 81, 0, 87, 0,
	88, 76, 75, 82, 85, 73, 74, 77, 0, 0,
	78, 0, 26, 83, 0, 0, 0, 84, 79, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 87, 0, 88, 0, 0, 82,
}

var yyPact = [...]int16{
	62, -1000, 1160, 565, 564, 1104, -1000, 451, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 412, 451, 451, 451, 12, 451, 440, 409,
	451, 484, 435, 365, 431, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 482, 562, 554, 553, 552, 451, 430, 428, 419,
	417, 413, 400, 357, 351, 340, 395, 392, 387, 369,
	337, 334, -1000, 550, 532, 528, 516, 513, 512, 511,
	510, 509, 451, 506, 505, 503, 451, 502, 500, 429,
	361, 360, -1000, -1000, 102, -1000, -1000, 658, 196, 192,
	102, 187, 182, 133, 105, 294, -1000, 879, 95, 127,
	651, -1000, 375, 55, -1000, -1000, -1000, -1000, -1000, 6,
	376, 1452, 1023, 1271, 844, 844, -1000, 867, -1000, 664,
	-1000, 230, 1368, 651, 1410, 940, -1000, 367, -1000, 729,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6,
	-1000, -1000, -1000, 6, -1000, -1000, 78, 350, 470, -1000,
	6, -1000, -1000, -1000, -1000, 474, -1000, 194, 655, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 760, -1000, -1000, 472, -1000, -1000, -1000, -1000, 922,
	-1000, 464, -1000, -1000, -1000, -1000, -1000, -1000, 328, 651,
	-1000, -1000, -1000, -1000, -1000, 1485, 1485, -1000, 451, 347,
	343, 325, 375, -1000, -1000, -1000, -1000, -1000, 319, 459,
	69, -1000, -1000, -1000, -1000, 201, 201, 201, -1000, -7,
	458, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 304,
	457, 470, 498, 321, 1452, -1000, -1000, -1000, -1000, -1000,
	317, 1023, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 240, 206, 444, 43,
	43, 451, 451, -28, 451, 313, 1271, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 451, 308, 844,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 290, 287, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 286, 664, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 210, 451,
	207, -1000, -1000, -1000, -1000, -1000, -1000, 451, 451, 1326,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 87, 495,
	280, 651, -1000, -1000, -1000, -1000, -1000, 1485, 1485, -1000,
	266, 1410, -1000, -1000, -1000, -1000, -1000, -1000, 263, 940,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 260, 367, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 487, 253, 729, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1485, -1000, -1000, 245,
	-1000, -1000, -1000, -1000, 114, -1000, -1000, 107, -1000, -1000,
	235, 1485, -1000, 231, 102, -1000, -1000, -1000, -1000, -1000,
	193, -1000, -1000, -1000, -1000, 784, -1000, -1000, 78, -1000,
	-1000, -1000, -1000, -1000, -1000, 779, 78, 78, -1000, -1000,
	-1000, -1000, -1000, -1000, 658, 99, 90, -1000, -1000, 89,
	83, -1000, -1000, 64, 102, 86, 78, 78, 6, -1000,
	-1000, 102, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 744,
	6, -1000, -1000, 102, 102, -1000, -1000, 1271, -1000, -1000,
	-1000, 229, 221, -1000, -1000, -1000, -1000, -1000, -1000, 78,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	208, 193, -1000, -1000, -1000, -1000, -1000, 43, 288, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	70, 779, -1000, -1000, 451, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 200, 119, 110, 444, 43, 451, 451, 451,
	446, 211, -1000, -1000, 85, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	56, 744, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1216, -1000, -1000, -1000,
	-1000, -1000, 58, -1000, -1000, -1000, -1000, 102, -1000, 230,
	-1000, 850, -1000, 269, 53, 78, 6, 6, 6, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 68, 876,
	-1000, -1000, -1000, -1000, -1000, -1000, 444, 248, -1000, -1000,
	-1000, -1000, -1000, -1000, 444, -1000, -1000, -1000, -1000, -1000,
	78, -1000, -1000, 78, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 17, 2, 45, 559, 875, 873, 60, 184, 871,
	870, 867, 453, 865, 855, 854, 53, 360, 0, 853,
	850, 50, 849, 844, 843, 841, 101, 839, 838, 57,
	413, 837, 835, 51, 833, 829, 49, 22, 827, 826,
	822, 58, 44, 41, 37, 36, 34, 207, 32, 27,
	26, 66, 819, 818, 816, 813, 811, 43, 810, 809,
	808, 807, 13, 801, 795, 792, 40, 789, 787, 52,
	785, 784, 776, 12, 18, 11, 82, 142, 21, 42,
	25, 199, 774, 770, 766, 19, 571, 762, 10, 7,
	761, 758, 757, 617, 755, 8, 754, 752, 748, 23,
	14, 746, 739, 31, 16, 738, 15, 737, 735, 47,
	733, 729, 727, 20, 720, 719, 716, 713, 708, 702,
	695, 693, 9, 691, 690, 686, 683, 28, 680, 678,
	677, 35, 666, 660, 4, 659, 648, 647, 641, 640,
	46, 64, 24, 639, 638, 636, 30, 630, 627, 624,
	29, 618, 615, 611, 38, 607, 606, 599, 39, 598,
	48, 594, 592, 588, 69, 586, 33, 581, 580, 579,
	5, 577, 575, 574, 1, 570,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	31, 32, 32, 21, 33, 33, 33, 33, 33, 33,
	19, 34, 35, 35, 36, 36, 36, 36, 36, 20,
	20, 37, 37, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 38,
	38, 24, 24, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 61, 61, 62,
	62, 62, 62, 63, 25, 64, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 67, 68, 70, 71, 69,
	72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 53, 53, 82, 83, 83, 84, 84, 85, 85,
	85, 85, 85, 47, 47, 87, 88, 88, 89, 89,
	89, 89, 89, 90, 91, 86, 92, 93, 93, 94,
	94, 95, 95, 95, 95, 52, 52, 96, 97, 97,
	98, 98, 99, 99, 99, 99, 99, 99, 100, 48,
	102, 102, 103, 103, 103, 103, 103, 103, 103, 101,
	104, 105, 39, 107, 108, 108, 109, 109, 109, 109,
	109, 109, 109, 3, 3, 76, 81, 81, 110, 111,
	111, 112, 112, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 114, 114, 119, 119, 119, 118, 17, 17,
	17, 117, 42, 120, 121, 121, 106, 106, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 123, 124, 51,
	125, 125, 126, 126, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	128, 46, 46, 129, 129, 130, 130, 131, 131, 131,
	131, 131, 131, 131, 131, 133, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 132, 132, 135,
	136, 136, 23, 137, 138, 138, 139, 139, 140, 140,
	140, 140, 140, 140, 140, 141, 142, 49, 143, 144,
	144, 145, 145, 146, 146, 146, 146, 146, 146, 146,
	50, 147, 148, 148, 149, 149, 150, 150, 150, 150,
	150, 40, 151, 152, 152, 153, 153, 154, 154, 154,
	154, 41, 155, 156, 157, 157, 79, 79, 80, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 160, 160, 159, 75, 45, 45, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 161, 161, 43,
	163, 164, 165, 165, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 78,
	4, 4, 2, 2, 1, 1, 77, 44, 167, 116,
	116, 168, 169, 169, 170, 170, 170, 170, 170, 171,
	115, 115, 172, 173, 173, 174, 174, 174, 174, 174,
	175, 16, 18, 14, 15, 22, 74, 8, 8, 30,
	7, 5, 5, 5, 6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 3, 2, 2, 4, 1,
	2, 1, 1, 1, 1, 2, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 3, 4,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 2, 3, 3, 3,
	3, 3, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 2, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 4, 2, 1, 1, 2, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 3, 4, 2, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 1,
	3, 0, 3, 1, 1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -31, -34,
	15, 62, -137, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-30, 13, 40, 41, 28, 64, 75, -107, -151, -155,
	-120, -163, -167, -161, -128, -87, -101, -143, -147, -124,
	-96, -82, -7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 61, 38, 42, 29, 53, 56, 58, 7,
	4, 4, 9, -12, -4, 5, 10, 8, -4, -4,
	-4, 71, 72, 73, -4, 8, 10, 8, -4, 5,
	8, 10, 8, 8, 5, 4, 4, 4, 4, -4,
	8, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	10, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	4, 4, 4, 4, 4, 4, 4, 4, 4, -4,
	4, 4, 4, -4, 4, 4, -5, 4, -6, -3,
	-4, 6, 8, 8, -8, 55, 10, 8, -28, -29,
	-16, -17, -18, -30, 10, 10, -8, 10, 10, 10,
	10, -32, -33, -21, 13, -16, -17, -18, -30, -35,
	-36, 13, -16, -17, -18, -30, 10, 10, -138, -139,
	-140, -16, -17, -18, -86, -141, -142, -30, 59, 23,
	24, -55, -56, -57, -58, -16, -17, -18, -59, 65,
	-65, -66, -16, -18, -67, -68, -70, -71, -30, 76,
	-108, -109, -81, -74, -16, -17, -18, -76, -30, -110,
	68, 16, 14, -152, -153, -154, -16, -17, -18, -26,
	-156, -157, -158, -16, -17, -18, -86, -93, -79, -80,
	-77, -78, -159, -75, -160, -26, -92, 36, 37, 20,
	33, 19, 22, 81, 60, -121, -106, -122, -16, -17,
	-18, -86, -93, -77, -78, -123, -26, 74, -164, -165,
	-166, -81, -16, -17, -18, -86, -47, -93, -74, -77,
	-160, -79, -80, -78, -76, -30, -164, -162, -16, -17,
	-18, -86, -47, -93, -77, -78, -30, -129, -130, -131,
	-16, -17, -18, -86, -93, -132, -51, -30, -133, 51,
	-88, -89, -16, -18, -90, -91, -30, 86, 85, -102,
	-103, -16, -17, -18, -104, -26, -86, -93, -105, 39,
	-144, -145, -146, -16, -17, -18, -86, -141, -142, -30,
	-148, -149, -150, -16, -17, -18, -86, -26, -125, -126,
	-127, -16, -17, -18, -86, -93, -41, -42, -43, -44,
	-45, -46, -48, -104, -49, -50, -30, -97, -98, -99,
	-16, -17, -18, -100, -86, -30, 57, -83, -84, -85,
	-16, -17, -18, -86, -30, -8, 8, -3, 5, -7,
	9, -29, -33, 9, 5, -36, 9, 5, 9, -140,
	-37, -38, -26, -37, -4, 8, 8, 9, -57, 10,
	8, 5, 9, -66, -69, 8, -69, -69, 77, 79,
	80, 78, 9, -109, 10, 8, 5, -3, 4, 9,
	-154, 9, -158, 10, 8, -2, 52, 6, 5, -2,
	-1, 47, 48, -1, -4, -4, 82, 83, -4, 9,
	-122, -4, 9, -166, 9, 9, 9, -131, 10, 8,
	-4, 9, -89, -4, -4, 9, -103, 8, 4, 9,
	-146, -37, -37, 9, -150, 9, -127, 9, -99, 4,
	9, -85, -37, 9, 10, 10, 9, -26, 9, -8,
	-60, -61, -62, -16, -17, -18, -63, 66, -72, -73,
	-74, -47, -75, -76, -77, -78, -79, -80, -81, -8,
	-111, -112, -113, -114, 45, -115, -116, -100, -117, -81,
	-118, -30, -119, -172, -168, 69, 84, 63, 17, 67,
	18, 87, -8, -8, -94, -95, -16, -17, -18, -30,
	10, 10, 10, 10, 10, -8, 10, -8, -8, -8,
	-135, -136, -134, -16, -17, -18, -86, -76, -77, -78,
	-47, -79, -80, -30, -8, -8, -106, 9, 9, -8,
	9, -62, -1, 9, -73, 9, -113, -4, 10, 8,
	10, 8, 10, 8, -2, -1, -4, -4, -4, 5,
	4, 9, -95, 9, -134, 9, 10, -8, -88, -173,
	-174, -16, -17, -18, -175, -30, 46, -169, -170, -16,
	-17, -18, -171, -30, 88, 10, -8, 9, 9, -174,
	-2, 9, -170, -2, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 1, 5, 0, 400, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	294, 71, 74, 0, 21, 30, 41, 293, 73, 95,
	0, 333, 0, 224, 0, 0, 366, 0, 261, 263,
	133, 0, 0, 309, 322, 240, 155, 158, 121, 124,
	183, 332, 342, 223, 380, 408, 377, 378, 260, 135,
	179, 308, 321, 238, 157, 123, 0, 0, 443, 444,
	193, 194, 2, 3, 6, 0, 437, 0, 0, 24,
	26, 27, 28, 29, 433, 434, 431, 218, 219, 220,
	432, 0, 31, 34, 0, 36, 37, 38, 39, 0,
	42, 0, 45, 46, 47, 48, 33, 435, 0, 295,
	296, 298, 299, 300, 301, 51, 51, 304, 0, 0,
	0, 0, 75, 76, 78, 79, 80, 81, 0, 0,
	0, 96, 98, 99, 100, 0, 0, 0, 104, 0,
	0, 184, 186, 187, 188, 189, 190, 191, 192, 0,
	0, 0, 0, 0, 334, 335, 337, 338, 339, 340,
	0, 343, 344, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 0, 0, 381,
	382, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 398, 0, 0, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 0, 264, 265,
	267, 268, 269, 270, 271, 272, 273, 274, 0, 0,
	0, 136, 138, 139, 140, 141, 142, 0, 0, 0,
	170, 172, 173, 174, 175, 176, 177, 178, 0, 0,
	0, 310, 311, 313, 314, 315, 316, 51, 51, 319,
	0, 323, 324, 326, 327, 328, 329, 330, 0, 241,
	242, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 0, 159, 160,
	162, 163, 164, 165, 166, 167, 0, 0, 125, 126,
	128, 129, 130, 131, 132, 440, 51, 445, 401, 0,
	23, 25, 32, 40, 0, 43, 50, 0, 292, 297,
	0, 52, 69, 0, 0, 305, 306, 72, 77, 82,
	85, 84, 94, 97, 101, 0, 102, 103, 0, 106,
	107, 108, 182, 185, 196, 199, 0, 0, 198, 331,
	336, 341, 345, 147, 0, 0, 0, 402, 403, 0,
	0, 404, 405, 0, 0, 0, 0, 0, 146, 222,
	227, 0, 379, 383, 407, 367, 262, 266, 287, 0,
	275, 134, 137, 0, 0, 169, 171, 0, 181, 307,
	312, 0, 0, 320, 325, 239, 243, 156, 161, 0,
	122, 127, 442, 438, 35, 44, 302, 70, 303, 145,
	0, 86, 87, 89, 90, 91, 92, 0, 0, 110,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 105,
	0, 200, 201, 203, 0, 205, 206, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 436, 195, 0, 149, 151, 152, 153, 154,
	346, 347, 348, 406, 399, 364, 365, 362, 363, 237,
	0, 289, 290, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 143, 144, 0, 317, 318, 168,
	83, 88, 0, 109, 111, 197, 202, 0, 212, 0,
	420, 0, 409, 0, 0, 0, 214, 215, 216, 422,
	411, 148, 150, 288, 291, 180, 93, 204, 0, 0,
	423, 425, 426, 427, 428, 429, 0, 0, 412, 414,
	415, 416, 417, 418, 0, 221, 217, 213, 421, 424,
	0, 410, 413, 0, 430, 419,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:175
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:183
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:200
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:223
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:232
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:235
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:250
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:263
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:280
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:285
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:305
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:308
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:338
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:341
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:346
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:368
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:371
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:376
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:398
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:407
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:412
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:440
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:449
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:458
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:467
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:499
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:502
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			yylex.(*lexer).stack.pop()
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:534
		{
			yylex.(*lexer).stack.pop()
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:539
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:558
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:567
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:577
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:595
		{
			yylex.(*lexer).stack.pop()
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:598
		{
			yylex.(*lexer).stack.pop()
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:612
		{
			yylex.(*lexer).stack.pop()
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:615
		{
			yylex.(*lexer).stack.pop()
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:620
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:644
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:653
		{
			yylex.(*lexer).stack.pop()
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:680
		{
			yylex.(*lexer).stack.pop()
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:685
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:694
		{
			yylex.(*lexer).stack.pop()
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:699
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:720
		{
			yyVAL.token = yyDollar[1].token
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:721
		{
			yyVAL.token = yyDollar[1].token
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:724
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:733
		{
			yylex.(*lexer).stack.pop()
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:736
		{
			yylex.(*lexer).stack.pop()
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:741
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:758
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yylex.(*lexer).stack.pop()
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:777
		{
			yylex.(*lexer).stack.pop()
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:789
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:796
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:805
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:819
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:828
		{
			yylex.(*lexer).stack.pop()
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:833
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:861
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:870
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:879
		{
			yylex.(*lexer).stack.pop()
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:909
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:918
		{
			yylex.(*lexer).stack.pop()
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:921
		{
			yylex.(*lexer).stack.pop()
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:943
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
			yylex.(*lexer).stack.pop()
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:969
		{
			yylex.(*lexer).stack.pop()
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:981
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:986
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1006
		{
			yylex.(*lexer).stack.pop()
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1009
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1024
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yylex.(*lexer).stack.pop()
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1061
		{
			yylex.(*lexer).stack.pop()
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1064
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1073
		{
			yylex.(*lexer).stack.pop()
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1078
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1102
		{
			yylex.(*lexer).stack.pop()
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1107
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1129
		{
			yylex.(*lexer).stack.pop()
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1134
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1151
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1158
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1192
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1199
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1208
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1220
		{
			yylex.(*lexer).stack.pop()
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1223
		{
			yylex.(*lexer).stack.pop()
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1240
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1247
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1256
		{
			yylex.(*lexer).stack.pop()
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1261
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1297
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1306
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1309
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1314
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1322
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1333
		{
			yyVAL.boolean = true
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1334
		{
			yyVAL.boolean = false
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1337
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1349
		{
			yylex.(*lexer).stack.pop()
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1354
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1363
		{
			yylex.(*lexer).stack.pop()
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1366
		{
			yylex.(*lexer).stack.pop()
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1371
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1390
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1399
		{
			yylex.(*lexer).stack.pop()
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1402
		{
			yylex.(*lexer).stack.pop()
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1407
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1426
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1435
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1444
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1471
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1480
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1489
		{
			yyVAL.ext = nil
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1492
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1503
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1509
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// technically extensions can have extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1522
		{
			yyVAL.args = []string{}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1525
		{
			yyVAL.args = []string{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1531
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1534
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
