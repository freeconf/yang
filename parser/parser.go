// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	s = strings.Trim(s, " \t\n\r")
	lastChar := len(s) - 1
	if s[0] == char_doublequote && s[lastChar] == char_doublequote {
		return s[1:lastChar]
	}
	if s[0] == char_singlequote && s[lastChar] == char_singlequote {
		return s[1:lastChar]
	}
	return s
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:68
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1592

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1610

var yyAct = [...]int16{
	287, 650, 284, 13, 642, 468, 13, 586, 344, 569,
	405, 473, 343, 546, 633, 270, 526, 533, 411, 283,
	382, 401, 45, 374, 305, 364, 328, 353, 48, 316,
	47, 349, 297, 46, 311, 309, 432, 307, 44, 340,
	49, 43, 308, 252, 259, 238, 446, 227, 219, 206,
	285, 191, 195, 11, 172, 212, 11, 185, 42, 479,
	480, 661, 211, 41, 146, 40, 298, 39, 75, 168,
	75, 31, 291, 26, 75, 26, 444, 627, 295, 26,
	474, 475, 84, 450, 453, 451, 452, 79, 78, 3,
	88, 76, 77, 80, 668, 28, 81, 28, 580, 86,
	175, 28, 657, 87, 82, 83, 16, 630, 190, 170,
	199, 169, 202, 209, 89, 223, 229, 90, 4, 91,
	214, 170, 85, 169, 578, 243, 255, 262, 577, 301,
	301, 576, 319, 27, 331, 27, 342, 352, 367, 377,
	385, 575, 404, 168, 414, 235, 103, 104, 105, 240,
	173, 303, 303, 656, 321, 574, 168, 168, 188, 244,
	197, 200, 266, 207, 271, 221, 228, 395, 397, 265,
	396, 358, 175, 394, 335, 241, 253, 260, 393, 299,
	299, 392, 317, 290, 329, 190, 341, 350, 365, 375,
	383, 239, 402, 370, 412, 199, 183, 519, 391, 268,
	369, 310, 310, 390, 324, 389, 209, 388, 313, 357,
	418, 518, 178, 75, 186, 517, 471, 470, 26, 223,
	203, 609, 173, 236, 182, 181, 422, 229, 180, 617,
	501, 616, 26, 286, 604, 188, 12, 177, 243, 12,
	28, 168, 423, 75, 602, 197, 200, 427, 26, 435,
	601, 615, 255, 614, 28, 431, 207, 168, 167, 262,
	75, 522, 240, 469, 520, 26, 187, 440, 31, 221,
	28, 75, 244, 495, 445, 516, 26, 228, 514, 448,
	449, 472, 168, 456, 235, 225, 483, 28, 241, 476,
	511, 186, 27, 509, 266, 463, 271, 301, 28, 507,
	503, 265, 253, 465, 239, 613, 493, 612, 492, 260,
	267, 293, 306, 306, 22, 323, 319, 22, 490, 303,
	359, 488, 487, 347, 346, 27, 485, 482, 331, 486,
	75, 268, 665, 174, 467, 26, 466, 458, 321, 457,
	342, 189, 464, 198, 193, 489, 208, 299, 222, 352,
	462, 347, 346, 442, 491, 441, 454, 28, 242, 254,
	261, 179, 300, 300, 367, 318, 317, 330, 335, 310,
	351, 366, 376, 384, 377, 403, 439, 413, 329, 496,
	500, 75, 385, 358, 430, 447, 26, 196, 324, 504,
	341, 143, 141, 142, 140, 27, 135, 508, 134, 350,
	438, 404, 510, 417, 437, 174, 505, 506, 28, 395,
	397, 414, 396, 656, 365, 394, 166, 165, 189, 370,
	393, 357, 512, 392, 375, 133, 369, 132, 198, 515,
	139, 75, 383, 625, 138, 137, 26, 256, 272, 208,
	391, 136, 267, 529, 26, 390, 27, 389, 354, 388,
	379, 402, 222, 131, 75, 130, 424, 129, 28, 26,
	187, 412, 31, 536, 128, 193, 28, 127, 572, 551,
	535, 242, 534, 114, 109, 113, 108, 99, 126, 98,
	306, 28, 537, 541, 125, 254, 124, 116, 115, 112,
	540, 107, 261, 527, 589, 75, 27, 428, 531, 323,
	26, 196, 471, 470, 27, 75, 97, 148, 646, 623,
	75, 6, 659, 97, 542, 26, 594, 95, 570, 27,
	539, 600, 28, 434, 434, 553, 529, 52, 591, 596,
	300, 459, 359, 641, 443, 75, 595, 28, 193, 429,
	26, 426, 605, 606, 587, 425, 419, 123, 536, 318,
	608, 215, 216, 117, 111, 535, 551, 534, 624, 610,
	27, 330, 28, 256, 502, 618, 593, 537, 541, 572,
	272, 640, 619, 461, 164, 540, 527, 163, 626, 193,
	161, 557, 351, 160, 75, 159, 589, 214, 157, 26,
	347, 346, 156, 628, 155, 154, 153, 366, 152, 542,
	27, 151, 150, 483, 149, 539, 121, 376, 594, 120,
	119, 28, 553, 118, 635, 384, 645, 93, 653, 570,
	591, 596, 637, 648, 92, 654, 636, 176, 595, 649,
	558, 538, 65, 635, 403, 192, 587, 201, 296, 64,
	213, 637, 645, 234, 413, 636, 663, 660, 288, 27,
	653, 666, 245, 315, 664, 314, 312, 312, 593, 325,
	354, 336, 667, 345, 634, 371, 643, 398, 651, 407,
	75, 416, 66, 269, 289, 26, 528, 592, 147, 258,
	257, 434, 434, 634, 62, 379, 96, 251, 75, 250,
	61, 373, 643, 26, 372, 523, 71, 28, 420, 176,
	651, 571, 363, 100, 101, 102, 362, 106, 75, 543,
	110, 70, 192, 26, 205, 28, 538, 204, 566, 567,
	33, 585, 201, 584, 337, 334, 327, 588, 326, 67,
	381, 640, 338, 213, 89, 28, 579, 122, 581, 582,
	214, 281, 380, 583, 75, 521, 662, 75, 72, 26,
	347, 346, 26, 27, 234, 292, 598, 599, 408, 528,
	214, 210, 75, 282, 158, 245, 63, 26, 162, 592,
	638, 28, 603, 27, 28, 263, 632, 302, 302, 556,
	320, 554, 332, 648, 75, 355, 368, 378, 386, 28,
	406, 249, 415, 552, 562, 564, 550, 549, 547, 214,
	545, 264, 571, 304, 304, 544, 322, 246, 333, 27,
	237, 356, 27, 60, 387, 75, 360, 421, 348, 588,
	26, 69, 548, 400, 312, 399, 73, 27, 568, 273,
	339, 68, 75, 410, 408, 409, 74, 26, 532, 249,
	561, 248, 28, 325, 563, 276, 233, 75, 559, 644,
	232, 652, 26, 231, 210, 336, 248, 230, 277, 28,
	276, 274, 275, 560, 226, 35, 565, 345, 530, 525,
	631, 524, 224, 277, 28, 644, 274, 275, 658, 220,
	27, 218, 217, 652, 214, 281, 85, 34, 51, 50,
	38, 371, 37, 436, 433, 247, 194, 27, 30, 214,
	184, 85, 29, 171, 23, 36, 21, 263, 280, 398,
	20, 19, 27, 18, 17, 75, 15, 14, 10, 9,
	26, 8, 5, 669, 2, 1, 670, 460, 407, 84,
	145, 144, 0, 264, 79, 78, 0, 88, 416, 0,
	80, 0, 28, 81, 0, 302, 86, 361, 0, 0,
	87, 82, 83, 0, 0, 0, 0, 477, 478, 0,
	481, 0, 0, 0, 320, 0, 0, 214, 281, 0,
	0, 304, 0, 484, 0, 0, 332, 0, 0, 75,
	27, 0, 0, 0, 26, 0, 555, 0, 0, 75,
	322, 455, 276, 0, 26, 573, 249, 355, 248, 0,
	0, 0, 333, 0, 0, 277, 28, 0, 0, 0,
	0, 0, 368, 0, 0, 0, 28, 494, 0, 0,
	0, 597, 378, 356, 0, 497, 498, 0, 0, 0,
	386, 214, 281, 85, 75, 0, 0, 0, 0, 26,
	0, 249, 0, 248, 27, 0, 0, 0, 0, 406,
	0, 0, 247, 0, 27, 75, 387, 0, 0, 415,
	26, 28, 0, 0, 0, 0, 0, 278, 276, 84,
	279, 0, 0, 555, 79, 78, 0, 88, 76, 77,
	80, 277, 28, 81, 274, 275, 86, 513, 0, 0,
	87, 82, 83, 0, 0, 0, 573, 247, 0, 27,
	0, 89, 0, 0, 90, 0, 91, 214, 281, 85,
	0, 0, 0, 597, 0, 0, 0, 0, 0, 0,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 280, 94, 0, 7, 26, 53, 0, 31, 0,
	0, 639, 590, 647, 84, 655, 0, 0, 0, 79,
	78, 56, 88, 76, 77, 80, 0, 28, 81, 0,
	639, 86, 0, 54, 55, 87, 82, 83, 0, 647,
	0, 0, 24, 25, 0, 0, 89, 655, 0, 90,
	0, 91, 0, 0, 85, 32, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 27, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 611, 7, 26,
	53, 0, 31, 0, 590, 0, 0, 0, 84, 0,
	620, 621, 622, 79, 78, 56, 88, 76, 77, 80,
	0, 28, 81, 0, 0, 86, 0, 54, 55, 87,
	82, 83, 0, 0, 0, 0, 24, 25, 0, 0,
	89, 0, 0, 90, 0, 91, 0, 0, 85, 32,
	0, 57, 0, 0, 0, 0, 0, 0, 75, 27,
	629, 0, 0, 26, 58, 0, 0, 0, 0, 0,
	0, 276, 84, 0, 0, 0, 0, 79, 78, 59,
	88, 76, 77, 80, 277, 28, 81, 0, 0, 86,
	0, 0, 0, 87, 82, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 90, 0, 91,
	214, 281, 85, 0, 0, 75, 0, 0, 0, 0,
	26, 0, 0, 27, 0, 0, 0, 294, 276, 84,
	0, 0, 0, 0, 79, 78, 0, 88, 76, 77,
	80, 277, 28, 81, 0, 0, 86, 0, 0, 0,
	87, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 90, 0, 91, 214, 281, 85,
	0, 0, 75, 0, 499, 0, 0, 26, 0, 0,
	27, 248, 0, 0, 294, 276, 84, 0, 0, 0,
	0, 79, 78, 0, 88, 76, 77, 80, 277, 28,
	81, 0, 0, 86, 361, 0, 0, 87, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 90, 75, 91, 214, 281, 85, 26, 0, 0,
	0, 248, 0, 0, 0, 276, 84, 27, 0, 0,
	0, 79, 78, 0, 88, 76, 77, 80, 277, 28,
	81, 0, 0, 86, 361, 0, 0, 87, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 90, 75, 91, 214, 281, 85, 26, 0, 0,
	0, 0, 249, 0, 248, 0, 84, 27, 276, 0,
	279, 79, 78, 0, 88, 76, 77, 80, 0, 28,
	81, 277, 0, 86, 274, 275, 607, 87, 82, 83,
	0, 249, 0, 248, 0, 0, 0, 276, 89, 279,
	0, 90, 0, 91, 0, 75, 85, 0, 0, 85,
	277, 0, 0, 274, 275, 0, 0, 27, 247, 84,
	0, 0, 0, 0, 79, 78, 0, 88, 76, 77,
	80, 0, 0, 81, 0, 0, 86, 0, 85, 0,
	87, 82, 83, 0, 0, 0, 0, 247, 0, 0,
	0, 89, 0, 0, 90, 0, 91, 0, 0, 85,
}

var yyPact = [...]int16{
	64, -1000, 1217, 620, 613, 1123, -1000, 508, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 469, 508, 508, 508, 73, 508, 483,
	466, 508, 549, 481, 465, 480, 479, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 548, 609, 606, 605, 602, 508, 542,
	478, 476, 470, 459, 456, 449, 445, 417, 388, 433,
	427, 426, 422, 384, 383, 501, 600, 598, 597, 594,
	592, 591, 590, 588, 584, 508, 581, 579, 576, 508,
	573, 570, 409, 408, -1000, -1000, 101, -1000, -1000, 755,
	227, 202, 101, 218, 215, 214, 186, 253, -1000, 374,
	102, 210, 528, -1000, 220, 206, 56, -1000, -1000, -1000,
	-1000, -1000, 14, -1000, 1027, 1495, 1048, 1338, 825, 825,
	-1000, 972, -1000, 681, -1000, 236, 1445, 528, 61, 908,
	-1000, 701, -1000, 740, 113, 501, -1000, 14, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14, -1000,
	-1000, -1000, 14, -1000, -1000, -1000, -1000, -1000, 541, -1000,
	498, 808, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 447, -1000, -1000, 540, -1000, -1000,
	-1000, -1000, -1000, 536, 488, -1000, 534, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 375, 528, -1000, -1000, -1000, -1000,
	-1000, 1548, 1548, -1000, 508, 396, 392, 367, 220, -1000,
	-1000, -1000, -1000, -1000, 345, 529, 67, -1000, -1000, -1000,
	-1000, 377, 377, 377, -1000, 4, 347, 982, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 329, 526, 508, 569,
	341, 1495, -1000, -1000, -1000, -1000, -1000, 333, 1048, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 326, 211, 497, 33, 33, 508, 508,
	-25, 508, 318, 1338, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 508, 317, 825, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 313, 312, 972, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 309, 681, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 298, 508, 264,
	-1000, -1000, -1000, -1000, -1000, -1000, 508, 508, 1395, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	222, 560, 291, 528, -1000, -1000, -1000, -1000, -1000, 1548,
	1548, -1000, 290, 61, -1000, -1000, -1000, -1000, -1000, -1000,
	284, 908, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 281,
	701, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 508, 269,
	740, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	266, -1000, -1000, -1000, -1000, 205, 201, -1000, -1000, 187,
	-1000, -1000, 255, 1548, -1000, 252, 101, -1000, -1000, -1000,
	-1000, -1000, 432, -1000, -1000, -1000, -1000, 1498, -1000, -1000,
	113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 777, 113,
	101, -1000, -1000, -1000, -1000, -1000, -1000, 755, 145, 131,
	-1000, -1000, 121, 118, -1000, -1000, 114, 101, 88, 113,
	113, 14, -1000, -1000, 101, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 840, 14, -1000, -1000, 101, 101, -1000,
	-1000, 1338, -1000, -1000, -1000, 241, 235, -1000, -1000, -1000,
	-1000, -1000, -1000, 101, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 225, 432, -1000, -1000, -1000, -1000,
	-1000, 33, 1527, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 212, 777, -1000, -1000, 508, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 297, 243, 221, 497,
	33, 508, 508, 508, 504, 554, -1000, -1000, 424, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 68, 840, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1281, -1000, -1000, -1000, -1000, -1000, 97, -1000, -1000, -1000,
	-1000, 101, -1000, 663, -1000, 577, -1000, 63, 92, 113,
	14, 14, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 503, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-8, 737, -1000, -1000, -1000, -1000, -1000, -1000, 497, 323,
	-1000, -1000, -1000, -1000, -1000, -1000, 497, -1000, -1000, -1000,
	-1000, 84, -1000, -1000, 113, -1000, -1000, 113, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 11, 5, 64, 678, 931, 930, 527, 258, 925,
	924, 922, 511, 921, 919, 918, 50, 233, 0, 917,
	916, 106, 914, 913, 911, 910, 906, 311, 905, 904,
	903, 54, 902, 900, 57, 51, 898, 896, 52, 36,
	894, 892, 890, 67, 65, 63, 58, 41, 38, 22,
	33, 30, 28, 40, 889, 888, 887, 882, 881, 48,
	879, 872, 871, 869, 16, 868, 865, 864, 47, 857,
	853, 46, 850, 846, 838, 17, 24, 15, 34, 183,
	72, 42, 35, 66, 836, 835, 833, 18, 648, 831,
	830, 39, 12, 8, 829, 674, 828, 9, 826, 825,
	823, 21, 10, 821, 818, 31, 27, 816, 19, 813,
	810, 45, 807, 805, 800, 13, 798, 797, 796, 793,
	781, 779, 776, 14, 770, 766, 763, 2, 755, 748,
	742, 730, 20, 729, 728, 726, 26, 725, 724, 7,
	723, 721, 720, 717, 714, 49, 62, 55, 711, 706,
	702, 25, 696, 694, 691, 23, 690, 689, 687, 43,
	684, 680, 679, 44, 673, 37, 672, 655, 653, 29,
	639, 78, 638, 32, 632, 630, 629, 1, 625, 581,
	533, 4, 508,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 31, 31, 32, 33, 33, 21, 34, 34, 34,
	34, 34, 34, 34, 19, 36, 37, 37, 38, 38,
	38, 38, 38, 38, 20, 20, 35, 39, 39, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 40, 40, 24, 24, 56,
	57, 57, 58, 58, 59, 59, 59, 59, 60, 60,
	61, 62, 62, 63, 63, 64, 64, 64, 64, 65,
	25, 66, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 70, 72, 73, 71, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 55, 55, 84,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 49,
	49, 89, 90, 90, 91, 91, 91, 91, 91, 92,
	93, 88, 94, 95, 95, 96, 96, 97, 97, 97,
	97, 54, 54, 98, 99, 99, 100, 100, 101, 101,
	101, 101, 101, 101, 102, 50, 104, 104, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 103, 106,
	107, 41, 109, 110, 110, 111, 111, 111, 111, 111,
	111, 111, 3, 3, 78, 83, 83, 112, 113, 113,
	114, 114, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 121, 121, 121, 122, 122, 123, 123,
	123, 123, 123, 123, 124, 120, 17, 17, 17, 119,
	44, 125, 126, 126, 108, 108, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 129, 53, 130, 130,
	131, 131, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 133, 48,
	48, 134, 134, 135, 135, 136, 136, 136, 136, 136,
	136, 136, 136, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 137, 137, 140, 141, 141,
	23, 142, 143, 143, 144, 144, 145, 145, 145, 145,
	145, 145, 145, 146, 147, 51, 148, 149, 149, 150,
	150, 151, 151, 151, 151, 151, 151, 151, 52, 152,
	153, 153, 154, 154, 155, 155, 155, 155, 155, 42,
	156, 157, 157, 158, 158, 159, 159, 159, 159, 43,
	160, 161, 162, 162, 81, 81, 82, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	165, 165, 164, 77, 47, 47, 167, 168, 168, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 166, 166,
	45, 170, 171, 172, 172, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	80, 4, 4, 2, 2, 1, 1, 79, 46, 174,
	118, 118, 175, 176, 176, 177, 177, 177, 177, 177,
	178, 117, 117, 179, 180, 180, 181, 181, 181, 181,
	181, 182, 16, 18, 14, 15, 22, 76, 8, 8,
	7, 5, 5, 6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 3, 1, 3, 1,
	1, 1, 1, 1, 4, 2, 1, 2, 3, 1,
	1, 1, 1, 1, 2, 4, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 2, 1, 2, 1, 1, 1, 2, 2, 2,
	1, 3, 2, 2, 2, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 2, 2, 4, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 2, 0, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 2,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 2, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 3, 3, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 4,
	2, 1, 1, 2, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 2, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 2,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 3,
	3, 0, 1, 1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -32,
	-36, 15, 62, -142, -56, -66, -28, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -7, 13, 40, 41, 28, 64, 77, 92,
	-109, -156, -160, -125, -170, -174, -166, -133, -89, -103,
	-148, -152, -129, -98, -84, 7, 30, 31, 27, 26,
	32, 35, 43, 44, 21, 61, 38, 42, 29, 53,
	56, 58, 4, 4, 9, -12, -4, 5, 10, 8,
	-4, -4, -4, 73, 74, 75, -4, 8, 10, 8,
	-4, 5, 8, 10, 8, 8, 8, 5, 4, 4,
	4, 4, -4, 5, 8, 8, 8, 8, 8, 8,
	10, 8, 10, 8, 10, 8, 8, 8, 8, 8,
	10, 8, 10, 8, -5, -6, -3, -4, 6, 4,
	4, 4, 4, 4, 4, 4, 4, 4, -4, 4,
	4, 4, -4, 4, 4, 8, 8, -8, 55, 10,
	8, -30, -31, -16, -17, -18, -7, 10, 10, -8,
	10, 10, 10, 10, -33, -34, -21, 13, -16, -17,
	-18, -35, -7, 91, -37, -38, 13, -16, -17, -18,
	-35, -7, 10, 10, -143, -144, -145, -16, -17, -18,
	-88, -146, -147, -7, 59, 23, 24, -57, -58, -59,
	-60, -16, -17, -18, -61, 65, -67, -68, -16, -18,
	-69, -70, -72, -73, -7, 78, -21, -110, -111, -83,
	-76, -16, -17, -18, -78, -7, -112, 70, 16, 14,
	-157, -158, -159, -16, -17, -18, -27, -161, -162, -163,
	-16, -17, -18, -88, -95, -81, -82, -79, -80, -164,
	-77, -165, -27, -94, 36, 37, 20, 33, 19, 22,
	83, 60, -126, -108, -127, -16, -17, -18, -88, -95,
	-79, -80, -128, -27, 76, -171, -172, -173, -83, -16,
	-17, -18, -88, -49, -95, -76, -79, -165, -81, -82,
	-80, -78, -7, -171, -167, -168, -169, -16, -17, -18,
	-88, -49, -95, -79, -80, -7, -134, -135, -136, -16,
	-17, -18, -88, -95, -137, -53, -7, -138, 51, -90,
	-91, -16, -18, -92, -93, -7, 88, 87, -104, -105,
	-16, -17, -18, -106, -27, -88, -95, -80, -78, -79,
	-107, 39, -149, -150, -151, -16, -17, -18, -88, -146,
	-147, -7, -153, -154, -155, -16, -17, -18, -88, -27,
	-130, -131, -132, -16, -17, -18, -88, -95, -43, -44,
	-45, -46, -47, -48, -50, -106, -51, -52, -7, -99,
	-100, -101, -16, -17, -18, -102, -88, -7, 57, -85,
	-86, -87, -16, -17, -18, -88, -7, -8, -3, 5,
	-7, 9, -31, -34, 9, 5, 5, -38, 9, 5,
	9, -145, -39, -40, -27, -39, -4, 8, 8, 9,
	-59, 10, 8, 5, 9, -68, -71, 8, -71, -71,
	79, 81, 82, 80, 9, 9, -111, 10, 8, 5,
	-4, 4, 9, -159, 9, -163, 10, 8, -2, 52,
	6, 5, -2, -1, 47, 48, -1, -4, -4, 84,
	85, -4, 9, -127, -4, 9, -173, 9, 9, -169,
	9, -136, 10, 8, -4, 9, -91, -4, -4, 9,
	-105, 8, 4, 9, -151, -39, -39, 9, -155, 9,
	-132, 9, -101, -4, 9, -87, 9, 10, 10, 10,
	9, -27, 9, -8, -62, -63, -64, -16, -17, -18,
	-65, 66, -74, -75, -76, -49, -77, -78, -79, -80,
	-81, -82, -83, -8, -113, -114, -115, -116, 45, -117,
	-118, -102, -119, -83, -120, -7, -121, -179, -175, 71,
	86, 63, 17, 67, 18, 89, -8, -8, -96, -97,
	-16, -17, -18, -7, 10, 10, 10, 10, 10, -8,
	10, -8, -8, -8, -140, -141, -139, -16, -17, -18,
	-88, -78, -79, -80, -49, -81, -82, -7, -8, -8,
	-108, 9, 9, -8, 9, -64, -1, 9, -75, 9,
	-115, -4, 10, 8, 10, 8, 10, 8, -2, -1,
	-4, -4, -4, 5, 4, 9, -97, 9, -139, 9,
	10, -8, -122, -123, -16, -18, -92, -93, -124, -7,
	68, -180, -181, -16, -17, -18, -182, -7, 46, -176,
	-177, -16, -17, -18, -178, -7, 90, 10, -8, 9,
	-123, 69, 9, -181, -2, 9, -177, -2, 10, -8,
	-8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 5, 0, 421, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 312, 77, 80, 0, 0, 24, 33, 45,
	311, 79, 101, 22, 0, 351, 0, 242, 0, 0,
	384, 0, 279, 281, 139, 0, 0, 327, 340, 258,
	161, 164, 127, 130, 0, 462, 463, 202, 203, 192,
	350, 360, 241, 401, 429, 398, 399, 278, 141, 188,
	326, 339, 256, 163, 129, 2, 3, 6, 0, 458,
	0, 0, 27, 29, 30, 31, 32, 454, 455, 452,
	236, 237, 238, 453, 0, 34, 37, 0, 39, 40,
	41, 42, 43, 0, 0, 46, 0, 49, 50, 51,
	52, 53, 36, 456, 0, 313, 314, 316, 317, 318,
	319, 57, 57, 322, 0, 0, 0, 0, 81, 82,
	84, 85, 86, 87, 0, 0, 0, 102, 104, 105,
	106, 0, 0, 0, 110, 0, 0, 0, 193, 195,
	196, 197, 198, 199, 200, 201, 0, 0, 0, 0,
	0, 352, 353, 355, 356, 357, 358, 0, 361, 362,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 244, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 0, 0, 402, 403, 405, 406,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 0, 0, 386, 387, 389, 390, 391,
	392, 393, 394, 395, 396, 397, 0, 282, 283, 285,
	286, 287, 288, 289, 290, 291, 292, 0, 0, 0,
	142, 144, 145, 146, 147, 148, 0, 0, 0, 176,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	0, 0, 0, 328, 329, 331, 332, 333, 334, 57,
	57, 337, 0, 341, 342, 344, 345, 346, 347, 348,
	0, 259, 260, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 0,
	165, 166, 168, 169, 170, 171, 172, 173, 0, 0,
	131, 132, 134, 135, 136, 137, 138, 460, 464, 422,
	0, 26, 28, 35, 44, 0, 0, 47, 55, 0,
	310, 315, 0, 58, 75, 0, 0, 323, 324, 78,
	83, 88, 91, 90, 100, 103, 107, 0, 108, 109,
	0, 112, 113, 114, 23, 191, 194, 205, 208, 0,
	0, 207, 349, 354, 359, 363, 153, 0, 0, 0,
	423, 424, 0, 0, 425, 426, 0, 0, 0, 0,
	0, 152, 240, 245, 0, 400, 404, 428, 385, 388,
	280, 284, 305, 0, 293, 140, 143, 0, 0, 175,
	177, 0, 190, 325, 330, 0, 0, 338, 343, 257,
	261, 162, 167, 0, 128, 133, 459, 38, 56, 48,
	320, 76, 321, 151, 0, 92, 93, 95, 96, 97,
	98, 0, 0, 116, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 111, 0, 209, 210, 212, 0, 214,
	215, 216, 217, 218, 219, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 457, 204, 0, 155,
	157, 158, 159, 160, 364, 365, 366, 427, 420, 382,
	383, 380, 381, 255, 0, 307, 308, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 149, 150,
	0, 335, 336, 174, 89, 94, 0, 115, 117, 206,
	211, 0, 221, 0, 441, 0, 430, 0, 0, 0,
	223, 224, 225, 443, 432, 154, 156, 306, 309, 189,
	99, 213, 0, 226, 228, 229, 230, 231, 232, 233,
	0, 0, 444, 446, 447, 448, 449, 450, 0, 0,
	433, 435, 436, 437, 438, 439, 0, 239, 235, 222,
	227, 0, 442, 445, 0, 431, 434, 0, 234, 451,
	440,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.builder.Submodule(l.parent, yyDollar[2].token, l.featureSet))
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:237
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:246
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:251
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:260
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:263
		{
			yylex.(*lexer).stack.pop()
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:278
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:291
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:309
		{
			yylex.(*lexer).stack.pop()
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:314
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:335
		{
			yylex.(*lexer).stack.pop()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:338
		{
			yylex.(*lexer).stack.pop()
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:343
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			yylex.(*lexer).stack.pop()
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:377
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:382
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:404
		{
			yylex.(*lexer).stack.pop()
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:407
		{
			yylex.(*lexer).stack.pop()
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:412
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:434
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:443
		{
			yylex.(*lexer).stack.pop()
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:448
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:485
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:494
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:503
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:512
		{
			yylex.(*lexer).stack.pop()
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:535
		{
			yylex.(*lexer).stack.pop()
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			yylex.(*lexer).stack.pop()
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:570
		{
			yylex.(*lexer).stack.pop()
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:594
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:603
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:613
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:634
		{
			yylex.(*lexer).stack.pop()
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yylex.(*lexer).stack.pop()
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:680
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:689
		{
			yylex.(*lexer).stack.pop()
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:710
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:719
		{
			yylex.(*lexer).stack.pop()
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:724
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:733
		{
			yylex.(*lexer).stack.pop()
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:759
		{
			yyVAL.token = yyDollar[1].token
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.token = yyDollar[1].token
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:763
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yylex.(*lexer).stack.pop()
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:775
		{
			yylex.(*lexer).stack.pop()
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:780
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:813
		{
			yylex.(*lexer).stack.pop()
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:816
		{
			yylex.(*lexer).stack.pop()
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:821
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:828
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:835
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:855
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:861
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:875
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:884
		{
			yylex.(*lexer).stack.pop()
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:917
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:926
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:935
		{
			yylex.(*lexer).stack.pop()
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:974
		{
			yylex.(*lexer).stack.pop()
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:977
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:999
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1022
		{
			yylex.(*lexer).stack.pop()
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1025
		{
			yylex.(*lexer).stack.pop()
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1037
		{
			yylex.(*lexer).stack.pop()
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1062
		{
			yylex.(*lexer).stack.pop()
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1065
		{
			yylex.(*lexer).stack.pop()
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1071
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1080
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1092
		{
			yylex.(*lexer).stack.pop()
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1097
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1117
		{
			yylex.(*lexer).stack.pop()
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1120
		{
			yylex.(*lexer).stack.pop()
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1129
		{
			yylex.(*lexer).stack.pop()
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1134
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1158
		{
			yylex.(*lexer).stack.pop()
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1185
		{
			yylex.(*lexer).stack.pop()
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1190
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1207
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1214
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1248
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1255
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1264
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1273
		{
			l := yylex.(*lexer)
			l.builder.Unique(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1282
		{
			yylex.(*lexer).stack.pop()
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1285
		{
			yylex.(*lexer).stack.pop()
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1309
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1316
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1325
		{
			yylex.(*lexer).stack.pop()
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1330
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1366
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1375
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1378
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1383
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1391
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1402
		{
			yyVAL.boolean = true
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1403
		{
			yyVAL.boolean = false
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1406
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1418
		{
			yylex.(*lexer).stack.pop()
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1423
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1432
		{
			yylex.(*lexer).stack.pop()
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1435
		{
			yylex.(*lexer).stack.pop()
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1440
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1459
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1468
		{
			yylex.(*lexer).stack.pop()
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1471
		{
			yylex.(*lexer).stack.pop()
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1476
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1495
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1504
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1513
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1522
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1531
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1540
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1549
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.ext = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1561
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1580
		{
			yyVAL.args = []string{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1586
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1589
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
