// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422
const kywd_ordered_by = 57423
const kywd_system = 57424
const kywd_user = 57425
const kywd_require_instance = 57426
const kywd_error_app_tag = 57427
const kywd_error_message = 57428
const kywd_bit = 57429
const kywd_position = 57430

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1523

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1547

var yyAct = [...]int16{
	278, 328, 616, 13, 624, 329, 13, 275, 452, 568,
	457, 261, 551, 515, 300, 391, 397, 528, 282, 508,
	274, 387, 368, 360, 281, 350, 338, 342, 317, 243,
	46, 288, 229, 43, 45, 44, 250, 299, 42, 280,
	431, 211, 204, 417, 219, 188, 41, 198, 163, 47,
	40, 39, 296, 167, 141, 284, 562, 38, 21, 37,
	203, 21, 631, 289, 302, 612, 180, 72, 298, 463,
	464, 286, 25, 560, 16, 72, 559, 637, 458, 459,
	25, 435, 438, 436, 437, 100, 101, 102, 165, 558,
	164, 72, 557, 439, 27, 556, 25, 170, 240, 194,
	239, 163, 27, 276, 501, 185, 11, 192, 178, 11,
	201, 609, 215, 221, 599, 500, 598, 394, 27, 206,
	234, 246, 253, 72, 292, 292, 3, 308, 25, 320,
	26, 331, 341, 353, 363, 371, 257, 390, 26, 400,
	259, 195, 301, 301, 163, 313, 258, 177, 297, 297,
	27, 312, 238, 163, 26, 4, 630, 294, 294, 256,
	310, 255, 381, 295, 295, 383, 311, 170, 322, 382,
	380, 345, 231, 379, 373, 356, 247, 263, 324, 181,
	185, 378, 176, 230, 235, 377, 376, 343, 192, 365,
	262, 175, 375, 355, 374, 404, 304, 591, 201, 72,
	168, 336, 335, 597, 25, 596, 586, 595, 183, 594,
	190, 215, 476, 199, 475, 213, 220, 584, 583, 221,
	408, 484, 173, 232, 244, 251, 27, 290, 290, 234,
	306, 172, 318, 412, 330, 339, 351, 361, 369, 451,
	388, 450, 398, 246, 72, 416, 409, 504, 420, 25,
	253, 72, 425, 429, 181, 165, 25, 164, 502, 419,
	419, 440, 26, 430, 257, 433, 434, 163, 259, 499,
	168, 27, 447, 497, 258, 456, 163, 494, 27, 460,
	630, 231, 467, 183, 162, 25, 449, 256, 292, 255,
	492, 190, 230, 235, 444, 455, 454, 490, 247, 72,
	486, 199, 163, 473, 25, 263, 301, 27, 442, 427,
	441, 426, 297, 227, 213, 207, 208, 320, 262, 470,
	227, 294, 220, 138, 432, 137, 27, 295, 136, 331,
	135, 130, 232, 129, 479, 128, 423, 127, 341, 513,
	472, 471, 453, 26, 469, 474, 244, 126, 422, 125,
	353, 206, 72, 251, 633, 466, 322, 25, 72, 448,
	363, 446, 26, 25, 483, 424, 324, 72, 371, 478,
	415, 111, 25, 110, 106, 487, 105, 345, 96, 27,
	95, 161, 160, 491, 174, 27, 134, 390, 133, 132,
	493, 290, 356, 343, 27, 381, 72, 400, 383, 488,
	489, 25, 382, 380, 131, 124, 379, 373, 495, 267,
	355, 419, 419, 498, 378, 365, 123, 122, 377, 376,
	318, 26, 268, 27, 403, 375, 121, 374, 511, 72,
	336, 335, 330, 120, 25, 119, 112, 277, 109, 104,
	12, 339, 72, 12, 518, 336, 335, 523, 206, 272,
	82, 521, 554, 351, 25, 605, 27, 520, 533, 26,
	72, 455, 454, 361, 94, 25, 517, 240, 443, 239,
	522, 369, 428, 327, 503, 86, 27, 571, 94, 143,
	6, 206, 272, 414, 411, 516, 92, 27, 405, 113,
	388, 578, 26, 72, 108, 575, 524, 519, 25, 606,
	398, 574, 496, 485, 445, 582, 535, 217, 511, 159,
	576, 158, 26, 156, 577, 155, 50, 154, 152, 151,
	27, 238, 150, 26, 588, 149, 518, 587, 590, 523,
	148, 509, 622, 521, 169, 147, 146, 145, 144, 520,
	117, 573, 184, 533, 191, 592, 116, 200, 517, 214,
	600, 554, 522, 601, 115, 552, 26, 233, 245, 252,
	114, 291, 291, 608, 307, 90, 319, 516, 571, 340,
	352, 362, 370, 89, 389, 620, 399, 610, 524, 519,
	569, 615, 578, 72, 539, 634, 575, 628, 25, 623,
	467, 535, 574, 540, 62, 287, 331, 614, 619, 61,
	627, 576, 305, 63, 169, 577, 260, 249, 248, 59,
	27, 509, 242, 171, 241, 331, 619, 184, 635, 58,
	479, 186, 622, 193, 627, 191, 205, 359, 638, 226,
	358, 636, 573, 68, 142, 200, 236, 349, 348, 639,
	303, 303, 93, 314, 67, 325, 26, 334, 214, 357,
	197, 384, 196, 393, 552, 402, 32, 567, 97, 98,
	99, 279, 103, 566, 326, 107, 233, 323, 72, 316,
	410, 569, 315, 25, 182, 64, 30, 367, 366, 69,
	245, 589, 406, 171, 283, 273, 240, 252, 239, 60,
	538, 118, 267, 536, 270, 27, 186, 534, 532, 330,
	72, 617, 531, 625, 193, 268, 505, 240, 265, 266,
	544, 546, 529, 527, 205, 526, 237, 153, 330, 617,
	525, 157, 228, 57, 346, 291, 337, 625, 548, 549,
	66, 26, 386, 82, 385, 226, 72, 70, 530, 550,
	238, 25, 182, 264, 30, 236, 561, 333, 563, 564,
	394, 332, 65, 565, 319, 396, 543, 395, 71, 514,
	545, 225, 541, 27, 224, 580, 581, 223, 222, 218,
	34, 202, 512, 507, 506, 340, 216, 542, 212, 210,
	547, 585, 209, 254, 33, 293, 293, 352, 309, 49,
	321, 48, 36, 344, 354, 364, 372, 362, 392, 26,
	401, 72, 35, 418, 303, 370, 25, 187, 240, 29,
	239, 179, 28, 240, 267, 239, 166, 72, 22, 267,
	20, 270, 25, 19, 389, 18, 17, 268, 27, 15,
	265, 266, 268, 325, 399, 265, 266, 14, 10, 9,
	8, 421, 5, 2, 27, 334, 72, 1, 413, 140,
	139, 25, 189, 206, 272, 82, 0, 0, 0, 202,
	82, 0, 238, 72, 26, 510, 357, 238, 25, 206,
	0, 0, 0, 27, 72, 271, 607, 81, 613, 25,
	26, 0, 76, 75, 384, 85, 632, 0, 77, 553,
	27, 78, 0, 0, 83, 347, 0, 0, 84, 79,
	80, 27, 0, 393, 461, 462, 0, 465, 0, 26,
	0, 254, 0, 402, 570, 206, 272, 72, 0, 407,
	468, 640, 25, 72, 641, 0, 26, 72, 25, 189,
	0, 0, 25, 0, 0, 0, 239, 26, 0, 0,
	267, 0, 0, 0, 27, 510, 0, 0, 0, 293,
	27, 0, 0, 268, 27, 0, 265, 266, 0, 537,
	0, 0, 477, 0, 0, 0, 0, 0, 555, 0,
	480, 481, 0, 0, 0, 0, 0, 0, 321, 206,
	26, 82, 0, 0, 0, 0, 26, 0, 553, 0,
	26, 0, 0, 579, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 72, 0, 570, 0, 0, 25, 0,
	0, 354, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 364, 76, 75, 0, 85, 73, 74, 77, 372,
	27, 78, 0, 0, 83, 618, 0, 626, 84, 79,
	80, 0, 0, 0, 537, 0, 0, 0, 392, 86,
	72, 0, 87, 618, 88, 25, 0, 82, 401, 0,
	0, 626, 269, 267, 81, 270, 26, 555, 0, 76,
	75, 0, 85, 73, 74, 77, 268, 27, 78, 265,
	266, 83, 0, 0, 579, 84, 79, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 87,
	0, 88, 206, 272, 82, 0, 0, 0, 0, 0,
	0, 0, 334, 26, 621, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 334, 621, 0, 0, 0, 0, 0, 572, 72,
	629, 91, 0, 7, 25, 51, 0, 30, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 76, 75,
	54, 85, 73, 74, 77, 593, 27, 78, 0, 0,
	83, 0, 52, 53, 84, 79, 80, 0, 602, 603,
	604, 23, 24, 0, 0, 86, 0, 0, 87, 0,
	88, 0, 0, 82, 31, 0, 55, 0, 0, 0,
	72, 0, 26, 0, 7, 25, 51, 56, 30, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 76,
	75, 54, 85, 73, 74, 77, 0, 27, 78, 572,
	0, 83, 0, 52, 53, 84, 79, 80, 0, 0,
	0, 0, 23, 24, 0, 0, 86, 0, 0, 87,
	0, 88, 0, 0, 82, 31, 72, 55, 611, 0,
	0, 25, 0, 26, 0, 0, 0, 0, 56, 267,
	81, 0, 0, 0, 0, 76, 75, 0, 85, 73,
	74, 77, 268, 27, 78, 0, 0, 83, 0, 0,
	0, 84, 79, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 87, 0, 88, 206, 272,
	82, 72, 0, 0, 0, 0, 25, 0, 0, 26,
	0, 0, 0, 285, 267, 81, 0, 0, 0, 0,
	76, 75, 0, 85, 73, 74, 77, 268, 27, 78,
	0, 0, 83, 0, 0, 0, 84, 79, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	87, 0, 88, 206, 272, 82, 72, 0, 482, 0,
	0, 25, 0, 0, 26, 0, 0, 0, 285, 0,
	81, 0, 0, 0, 0, 76, 75, 0, 85, 73,
	74, 77, 0, 27, 78, 0, 0, 83, 347, 0,
	0, 84, 79, 80, 0, 0, 0, 0, 72, 0,
	0, 0, 86, 25, 0, 87, 0, 88, 206, 272,
	82, 0, 81, 0, 0, 0, 0, 76, 75, 26,
	85, 73, 74, 77, 0, 27, 78, 0, 0, 83,
	347, 0, 0, 84, 79, 80, 0, 0, 0, 0,
	72, 0, 0, 0, 86, 25, 0, 87, 0, 88,
	206, 272, 82, 0, 81, 0, 0, 0, 0, 76,
	75, 26, 85, 73, 74, 77, 0, 27, 78, 0,
	0, 83, 0, 0, 0, 84, 79, 80, 0, 0,
	0, 0, 72, 0, 0, 0, 86, 0, 0, 87,
	0, 88, 206, 0, 82, 0, 81, 0, 0, 0,
	0, 76, 75, 26, 85, 73, 74, 77, 0, 0,
	78, 0, 0, 83, 0, 0, 0, 84, 79, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 87, 0, 88, 0, 0, 82,
}

var yyPact = [...]int16{
	101, -1000, 1193, 569, 561, 1132, -1000, 459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 370, 459, 459, 459, 14, 459, 431, 366,
	459, 489, 430, 363, 428, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 484, 556, 550, 542, 536, 459, 427, 425, 418,
	409, 408, 397, 339, 327, 323, 396, 381, 380, 378,
	320, 315, 473, 534, 533, 532, 531, 526, 521, 518,
	515, 514, 459, 513, 511, 509, 459, 507, 505, 374,
	373, -1000, -1000, 247, -1000, -1000, 351, 221, 212, 247,
	181, 172, 137, 98, 729, -1000, 916, 89, 131, 292,
	-1000, 442, 237, -1000, -1000, -1000, -1000, -1000, -7, 453,
	996, 1043, 1304, 794, 794, -1000, 389, -1000, 422, -1000,
	116, 1401, 292, 1443, 856, -1000, 60, -1000, 810, 80,
	473, -1000, -7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -7, -1000, -1000, -1000, -7, -1000, -1000,
	-1000, -1000, -1000, 483, -1000, 435, 910, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 661,
	-1000, -1000, 479, -1000, -1000, -1000, -1000, 839, -1000, 478,
	-1000, -1000, -1000, -1000, -1000, -1000, 361, 292, -1000, -1000,
	-1000, -1000, -1000, 1485, 1485, -1000, 459, 340, 328, 356,
	442, -1000, -1000, -1000, -1000, -1000, 301, 467, 244, -1000,
	-1000, -1000, -1000, 316, 316, 316, -1000, 4, 84, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 300, 463, 473,
	500, 352, 996, -1000, -1000, -1000, -1000, -1000, 350, 1043,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 231, 290, 456, 31, 31, 459,
	459, -13, 459, 346, 1304, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 459, 335, 794, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 332, 331, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 294, 422, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 204, 459, 360, -1000,
	-1000, -1000, -1000, -1000, -1000, 459, 459, 1359, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 213, 499, 291, 292,
	-1000, -1000, -1000, -1000, -1000, 1485, 1485, -1000, 288, 1443,
	-1000, -1000, -1000, -1000, -1000, -1000, 281, 856, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 268, 60, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 498, 264, 810, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 260, -1000, -1000, -1000,
	-1000, 105, -1000, -1000, 94, -1000, -1000, 249, 1485, -1000,
	238, 247, -1000, -1000, -1000, -1000, -1000, 273, -1000, -1000,
	-1000, -1000, 799, -1000, -1000, 80, -1000, -1000, -1000, -1000,
	-1000, -1000, 693, 80, 80, -1000, -1000, -1000, -1000, -1000,
	-1000, 351, 85, 82, -1000, -1000, 79, 66, -1000, -1000,
	63, 247, 46, 80, 80, -7, -1000, -1000, 247, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 920, -7, -1000, -1000,
	247, 247, -1000, -1000, 1304, -1000, -1000, -1000, 209, 208,
	-1000, -1000, -1000, -1000, -1000, -1000, 80, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 197, 273, -1000, -1000,
	-1000, -1000, -1000, 31, 672, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 188, 693, -1000, -1000,
	459, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 199, 195,
	106, 456, 31, 459, 459, 459, 450, 495, -1000, -1000,
	867, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 102, 920, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1249, -1000, -1000, -1000, -1000, -1000, 55, -1000,
	-1000, -1000, -1000, 247, -1000, 116, -1000, 486, -1000, 192,
	52, 80, -7, -7, -7, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 345, 576, -1000, -1000, -1000, -1000,
	-1000, -1000, 456, 68, -1000, -1000, -1000, -1000, -1000, -1000,
	456, -1000, -1000, -1000, -1000, -1000, 80, -1000, -1000, 80,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 10, 8, 54, 634, 850, 849, 516, 284, 847,
	843, 842, 480, 840, 839, 838, 103, 437, 0, 837,
	829, 74, 826, 825, 823, 820, 55, 818, 816, 53,
	812, 811, 66, 809, 807, 45, 43, 803, 802, 792,
	59, 57, 51, 50, 46, 38, 33, 35, 34, 30,
	49, 791, 789, 784, 782, 779, 41, 778, 776, 774,
	773, 19, 772, 770, 769, 44, 768, 767, 40, 764,
	761, 759, 13, 52, 11, 64, 24, 18, 37, 14,
	63, 758, 757, 755, 16, 661, 752, 1, 5, 751,
	747, 743, 39, 739, 12, 737, 734, 732, 21, 15,
	730, 726, 26, 27, 724, 20, 723, 722, 32, 716,
	715, 713, 17, 712, 702, 698, 697, 693, 690, 689,
	685, 7, 684, 679, 678, 677, 22, 675, 672, 669,
	28, 667, 664, 9, 663, 657, 656, 652, 650, 47,
	60, 42, 644, 638, 637, 25, 633, 630, 627, 23,
	619, 614, 612, 29, 609, 608, 607, 36, 606, 68,
	603, 602, 599, 71, 595, 31, 594, 593, 589, 4,
	587, 584, 581, 2, 575,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	30, 31, 31, 21, 32, 32, 32, 32, 32, 32,
	19, 33, 34, 34, 35, 35, 35, 35, 35, 20,
	20, 36, 36, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 37,
	37, 24, 24, 53, 54, 54, 55, 55, 56, 56,
	56, 56, 57, 57, 58, 59, 59, 60, 60, 61,
	61, 61, 61, 62, 25, 63, 64, 64, 65, 65,
	65, 65, 65, 65, 65, 66, 67, 69, 70, 68,
	71, 71, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 52, 52, 81, 82, 82, 83, 83, 84, 84,
	84, 84, 84, 46, 46, 86, 87, 87, 88, 88,
	88, 88, 88, 89, 90, 85, 91, 92, 92, 93,
	93, 94, 94, 94, 94, 51, 51, 95, 96, 96,
	97, 97, 98, 98, 98, 98, 98, 98, 99, 47,
	101, 101, 102, 102, 102, 102, 102, 102, 102, 100,
	103, 104, 38, 106, 107, 107, 108, 108, 108, 108,
	108, 108, 108, 3, 3, 75, 80, 80, 109, 110,
	110, 111, 111, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 113, 113, 118, 118, 118, 117, 17, 17,
	17, 116, 41, 119, 120, 120, 105, 105, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 122, 123, 50,
	124, 124, 125, 125, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	127, 45, 45, 128, 128, 129, 129, 130, 130, 130,
	130, 130, 130, 130, 130, 132, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 131, 131, 134,
	135, 135, 23, 136, 137, 137, 138, 138, 139, 139,
	139, 139, 139, 139, 139, 140, 141, 48, 142, 143,
	143, 144, 144, 145, 145, 145, 145, 145, 145, 145,
	49, 146, 147, 147, 148, 148, 149, 149, 149, 149,
	149, 39, 150, 151, 151, 152, 152, 153, 153, 153,
	153, 40, 154, 155, 156, 156, 78, 78, 79, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 159, 159, 158, 74, 44, 44, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 160, 160, 42,
	162, 163, 164, 164, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 77,
	4, 4, 2, 2, 1, 1, 76, 43, 166, 115,
	115, 167, 168, 168, 169, 169, 169, 169, 169, 170,
	114, 114, 171, 172, 172, 173, 173, 173, 173, 173,
	174, 16, 18, 14, 15, 22, 73, 8, 8, 7,
	5, 5, 6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 3, 2, 2, 4, 1,
	2, 1, 1, 1, 1, 2, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 3, 4,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 2, 3, 3, 3,
	3, 3, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 2, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 4, 2, 1, 1, 2, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 3, 4, 2, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 3,
	0, 1, 1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -30, -33,
	15, 62, -136, -53, -63, -38, -39, -40, -41, -42,
	-43, -44, -45, -46, -47, -48, -49, -50, -51, -52,
	-7, 13, 40, 41, 28, 64, 75, -106, -150, -154,
	-119, -162, -166, -160, -127, -86, -100, -142, -146, -123,
	-95, -81, 7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 61, 38, 42, 29, 53, 56, 58, 4,
	4, 9, -12, -4, 5, 10, 8, -4, -4, -4,
	71, 72, 73, -4, 8, 10, 8, -4, 5, 8,
	10, 8, 8, 5, 4, 4, 4, 4, -4, 8,
	8, 8, 8, 8, 8, 10, 8, 10, 8, 10,
	8, 8, 8, 8, 8, 10, 8, 10, 8, -5,
	-6, -3, -4, 6, 4, 4, 4, 4, 4, 4,
	4, 4, 4, -4, 4, 4, 4, -4, 4, 4,
	8, 8, -8, 55, 10, 8, -28, -29, -16, -17,
	-18, -7, 10, 10, -8, 10, 10, 10, 10, -31,
	-32, -21, 13, -16, -17, -18, -7, -34, -35, 13,
	-16, -17, -18, -7, 10, 10, -137, -138, -139, -16,
	-17, -18, -85, -140, -141, -7, 59, 23, 24, -54,
	-55, -56, -57, -16, -17, -18, -58, 65, -64, -65,
	-16, -18, -66, -67, -69, -70, -7, 76, -107, -108,
	-80, -73, -16, -17, -18, -75, -7, -109, 68, 16,
	14, -151, -152, -153, -16, -17, -18, -26, -155, -156,
	-157, -16, -17, -18, -85, -92, -78, -79, -76, -77,
	-158, -74, -159, -26, -91, 36, 37, 20, 33, 19,
	22, 81, 60, -120, -105, -121, -16, -17, -18, -85,
	-92, -76, -77, -122, -26, 74, -163, -164, -165, -80,
	-16, -17, -18, -85, -46, -92, -73, -76, -159, -78,
	-79, -77, -75, -7, -163, -161, -16, -17, -18, -85,
	-46, -92, -76, -77, -7, -128, -129, -130, -16, -17,
	-18, -85, -92, -131, -50, -7, -132, 51, -87, -88,
	-16, -18, -89, -90, -7, 86, 85, -101, -102, -16,
	-17, -18, -103, -26, -85, -92, -104, 39, -143, -144,
	-145, -16, -17, -18, -85, -140, -141, -7, -147, -148,
	-149, -16, -17, -18, -85, -26, -124, -125, -126, -16,
	-17, -18, -85, -92, -40, -41, -42, -43, -44, -45,
	-47, -103, -48, -49, -7, -96, -97, -98, -16, -17,
	-18, -99, -85, -7, 57, -82, -83, -84, -16, -17,
	-18, -85, -7, -8, -3, 5, -7, 9, -29, -32,
	9, 5, -35, 9, 5, 9, -139, -36, -37, -26,
	-36, -4, 8, 8, 9, -56, 10, 8, 5, 9,
	-65, -68, 8, -68, -68, 77, 79, 80, 78, 9,
	-108, 10, 8, 5, -3, 4, 9, -153, 9, -157,
	10, 8, -2, 52, 6, 5, -2, -1, 47, 48,
	-1, -4, -4, 82, 83, -4, 9, -121, -4, 9,
	-165, 9, 9, 9, -130, 10, 8, -4, 9, -88,
	-4, -4, 9, -102, 8, 4, 9, -145, -36, -36,
	9, -149, 9, -126, 9, -98, 4, 9, -84, 9,
	10, 10, 9, -26, 9, -8, -59, -60, -61, -16,
	-17, -18, -62, 66, -71, -72, -73, -46, -74, -75,
	-76, -77, -78, -79, -80, -8, -110, -111, -112, -113,
	45, -114, -115, -99, -116, -80, -117, -7, -118, -171,
	-167, 69, 84, 63, 17, 67, 18, 87, -8, -8,
	-93, -94, -16, -17, -18, -7, 10, 10, 10, 10,
	10, -8, 10, -8, -8, -8, -134, -135, -133, -16,
	-17, -18, -85, -75, -76, -77, -46, -78, -79, -7,
	-8, -8, -105, 9, 9, -8, 9, -61, -1, 9,
	-72, 9, -112, -4, 10, 8, 10, 8, 10, 8,
	-2, -1, -4, -4, -4, 5, 4, 9, -94, 9,
	-133, 9, 10, -8, -87, -172, -173, -16, -17, -18,
	-174, -7, 46, -168, -169, -16, -17, -18, -170, -7,
	88, 10, -8, 9, 9, -173, -2, 9, -169, -2,
	-8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 5, 0, 400, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 294,
	71, 74, 0, 21, 30, 41, 293, 73, 95, 0,
	333, 0, 224, 0, 0, 366, 0, 261, 263, 133,
	0, 0, 309, 322, 240, 155, 158, 121, 124, 0,
	441, 442, 193, 194, 183, 332, 342, 223, 380, 408,
	377, 378, 260, 135, 179, 308, 321, 238, 157, 123,
	2, 3, 6, 0, 437, 0, 0, 24, 26, 27,
	28, 29, 433, 434, 431, 218, 219, 220, 432, 0,
	31, 34, 0, 36, 37, 38, 39, 0, 42, 0,
	45, 46, 47, 48, 33, 435, 0, 295, 296, 298,
	299, 300, 301, 51, 51, 304, 0, 0, 0, 0,
	75, 76, 78, 79, 80, 81, 0, 0, 0, 96,
	98, 99, 100, 0, 0, 0, 104, 0, 0, 184,
	186, 187, 188, 189, 190, 191, 192, 0, 0, 0,
	0, 0, 334, 335, 337, 338, 339, 340, 0, 343,
	344, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 0, 0, 381, 382, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 0, 0, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 0, 264, 265, 267, 268,
	269, 270, 271, 272, 273, 274, 0, 0, 0, 136,
	138, 139, 140, 141, 142, 0, 0, 0, 170, 172,
	173, 174, 175, 176, 177, 178, 0, 0, 0, 310,
	311, 313, 314, 315, 316, 51, 51, 319, 0, 323,
	324, 326, 327, 328, 329, 330, 0, 241, 242, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 259, 0, 159, 160, 162, 163,
	164, 165, 166, 167, 0, 0, 125, 126, 128, 129,
	130, 131, 132, 439, 443, 401, 0, 23, 25, 32,
	40, 0, 43, 50, 0, 292, 297, 0, 52, 69,
	0, 0, 305, 306, 72, 77, 82, 85, 84, 94,
	97, 101, 0, 102, 103, 0, 106, 107, 108, 182,
	185, 196, 199, 0, 0, 198, 331, 336, 341, 345,
	147, 0, 0, 0, 402, 403, 0, 0, 404, 405,
	0, 0, 0, 0, 0, 146, 222, 227, 0, 379,
	383, 407, 367, 262, 266, 287, 0, 275, 134, 137,
	0, 0, 169, 171, 0, 181, 307, 312, 0, 0,
	320, 325, 239, 243, 156, 161, 0, 122, 127, 438,
	35, 44, 302, 70, 303, 145, 0, 86, 87, 89,
	90, 91, 92, 0, 0, 110, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 105, 0, 200, 201, 203,
	0, 205, 206, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 436, 195,
	0, 149, 151, 152, 153, 154, 346, 347, 348, 406,
	399, 364, 365, 362, 363, 237, 0, 289, 290, 276,
	277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	143, 144, 0, 317, 318, 168, 83, 88, 0, 109,
	111, 197, 202, 0, 212, 0, 420, 0, 409, 0,
	0, 0, 214, 215, 216, 422, 411, 148, 150, 288,
	291, 180, 93, 204, 0, 0, 423, 425, 426, 427,
	428, 429, 0, 0, 412, 414, 415, 416, 417, 418,
	0, 221, 217, 213, 421, 424, 0, 410, 413, 0,
	430, 419,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:175
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:183
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:200
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:223
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:232
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:235
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:250
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:263
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:280
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:285
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:305
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:308
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:338
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:341
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:346
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:368
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:371
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:376
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:398
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:407
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:412
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:440
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:449
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:458
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:467
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:499
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:502
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			yylex.(*lexer).stack.pop()
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:534
		{
			yylex.(*lexer).stack.pop()
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:539
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:558
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:567
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:577
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:595
		{
			yylex.(*lexer).stack.pop()
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:598
		{
			yylex.(*lexer).stack.pop()
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:612
		{
			yylex.(*lexer).stack.pop()
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:615
		{
			yylex.(*lexer).stack.pop()
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:620
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:644
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:653
		{
			yylex.(*lexer).stack.pop()
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:680
		{
			yylex.(*lexer).stack.pop()
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:685
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:694
		{
			yylex.(*lexer).stack.pop()
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:699
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:720
		{
			yyVAL.token = yyDollar[1].token
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:721
		{
			yyVAL.token = yyDollar[1].token
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:724
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:733
		{
			yylex.(*lexer).stack.pop()
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:736
		{
			yylex.(*lexer).stack.pop()
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:741
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:758
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yylex.(*lexer).stack.pop()
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:777
		{
			yylex.(*lexer).stack.pop()
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:789
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:796
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:805
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:819
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:828
		{
			yylex.(*lexer).stack.pop()
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:833
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:861
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:870
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:879
		{
			yylex.(*lexer).stack.pop()
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:909
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:918
		{
			yylex.(*lexer).stack.pop()
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:921
		{
			yylex.(*lexer).stack.pop()
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:943
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
			yylex.(*lexer).stack.pop()
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:969
		{
			yylex.(*lexer).stack.pop()
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:981
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:986
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1006
		{
			yylex.(*lexer).stack.pop()
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1009
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1024
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yylex.(*lexer).stack.pop()
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1061
		{
			yylex.(*lexer).stack.pop()
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1064
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1073
		{
			yylex.(*lexer).stack.pop()
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1078
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1102
		{
			yylex.(*lexer).stack.pop()
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1107
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1129
		{
			yylex.(*lexer).stack.pop()
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1134
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1151
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1158
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1192
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1199
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1208
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1220
		{
			yylex.(*lexer).stack.pop()
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1223
		{
			yylex.(*lexer).stack.pop()
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1240
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1247
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1256
		{
			yylex.(*lexer).stack.pop()
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1261
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1297
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1306
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1309
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1314
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1322
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1333
		{
			yyVAL.boolean = true
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1334
		{
			yyVAL.boolean = false
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1337
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1349
		{
			yylex.(*lexer).stack.pop()
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1354
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1363
		{
			yylex.(*lexer).stack.pop()
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1366
		{
			yylex.(*lexer).stack.pop()
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1371
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1390
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1399
		{
			yylex.(*lexer).stack.pop()
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1402
		{
			yylex.(*lexer).stack.pop()
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1407
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1426
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1435
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1444
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1471
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1480
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1489
		{
			yyVAL.ext = nil
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1492
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1497
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1511
		{
			yyVAL.args = []string{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1517
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1520
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
