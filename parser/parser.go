// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	s = strings.Trim(s, " \t\n\r")
	lastChar := len(s) - 1
	if s[0] == char_doublequote && s[lastChar] == char_doublequote {
		return s[1:lastChar]
	}
	if s[0] == char_singlequote && s[lastChar] == char_singlequote {
		return s[1:lastChar]
	}
	return s
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:68
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1596

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1608

var yyAct = [...]int16{
	289, 653, 407, 13, 645, 471, 13, 346, 572, 286,
	345, 549, 272, 413, 636, 403, 589, 476, 529, 536,
	285, 376, 355, 307, 48, 47, 313, 311, 435, 214,
	366, 46, 169, 384, 351, 44, 43, 42, 41, 342,
	49, 310, 299, 40, 39, 330, 318, 261, 208, 254,
	221, 187, 309, 197, 174, 664, 229, 170, 240, 297,
	193, 482, 483, 3, 31, 213, 104, 105, 106, 449,
	583, 172, 287, 171, 204, 11, 671, 75, 11, 668,
	630, 75, 26, 16, 477, 478, 26, 453, 456, 454,
	455, 660, 4, 45, 75, 633, 26, 504, 581, 26,
	172, 177, 171, 250, 28, 75, 580, 278, 28, 192,
	26, 201, 579, 185, 211, 170, 225, 231, 28, 170,
	279, 28, 300, 276, 277, 578, 245, 257, 264, 577,
	303, 303, 28, 321, 522, 333, 181, 344, 354, 369,
	379, 387, 27, 406, 651, 416, 216, 170, 86, 242,
	534, 288, 246, 521, 12, 268, 27, 12, 170, 27,
	659, 349, 348, 397, 360, 399, 398, 520, 372, 267,
	27, 202, 396, 175, 177, 337, 395, 394, 393, 392,
	273, 190, 419, 199, 391, 390, 209, 192, 223, 230,
	315, 293, 188, 620, 180, 619, 179, 201, 243, 255,
	262, 238, 301, 301, 371, 319, 205, 331, 211, 343,
	352, 367, 377, 385, 618, 404, 617, 414, 616, 184,
	615, 225, 183, 305, 305, 182, 323, 292, 425, 231,
	496, 470, 495, 469, 461, 445, 460, 444, 426, 170,
	245, 170, 144, 438, 143, 142, 175, 141, 241, 136,
	430, 135, 176, 134, 257, 133, 434, 202, 612, 190,
	191, 264, 200, 242, 607, 210, 246, 224, 605, 199,
	188, 443, 604, 474, 473, 525, 523, 244, 256, 263,
	209, 302, 302, 475, 320, 448, 332, 519, 268, 353,
	368, 378, 386, 223, 405, 486, 415, 479, 459, 303,
	517, 230, 267, 466, 451, 452, 514, 512, 468, 75,
	510, 427, 243, 273, 26, 189, 506, 31, 321, 270,
	472, 312, 312, 75, 326, 176, 255, 493, 26, 359,
	333, 491, 490, 262, 75, 488, 28, 485, 191, 26,
	467, 489, 344, 132, 115, 131, 114, 110, 200, 109,
	28, 354, 100, 450, 99, 269, 465, 308, 308, 210,
	325, 28, 241, 457, 492, 361, 369, 442, 433, 421,
	337, 301, 224, 441, 27, 494, 379, 360, 340, 440,
	90, 499, 420, 168, 387, 503, 216, 283, 167, 140,
	319, 244, 305, 195, 237, 372, 507, 511, 139, 27,
	508, 509, 331, 406, 138, 256, 397, 137, 399, 398,
	130, 323, 263, 416, 343, 396, 129, 513, 515, 395,
	394, 393, 392, 352, 75, 75, 518, 391, 390, 26,
	189, 371, 31, 128, 127, 75, 626, 431, 367, 75,
	26, 198, 126, 125, 26, 117, 532, 116, 377, 75,
	302, 28, 270, 113, 26, 108, 385, 474, 473, 146,
	149, 6, 28, 539, 554, 52, 28, 96, 98, 320,
	462, 575, 526, 446, 537, 404, 28, 540, 544, 432,
	429, 332, 428, 422, 124, 414, 546, 118, 269, 27,
	312, 112, 543, 627, 505, 569, 570, 592, 464, 410,
	27, 216, 353, 166, 27, 75, 165, 498, 195, 326,
	26, 163, 162, 582, 27, 584, 585, 368, 530, 195,
	586, 161, 659, 594, 599, 603, 308, 378, 649, 532,
	159, 75, 28, 601, 602, 386, 26, 158, 598, 157,
	156, 155, 359, 573, 538, 325, 154, 608, 539, 606,
	153, 554, 609, 152, 405, 611, 151, 644, 28, 537,
	613, 122, 540, 544, 415, 26, 178, 121, 621, 590,
	120, 290, 575, 545, 194, 119, 203, 543, 361, 215,
	629, 622, 236, 94, 556, 349, 348, 28, 93, 592,
	597, 247, 643, 560, 657, 314, 314, 531, 327, 652,
	338, 530, 347, 291, 373, 631, 400, 561, 409, 65,
	418, 349, 348, 486, 298, 594, 599, 638, 227, 648,
	64, 656, 574, 317, 640, 27, 316, 639, 66, 538,
	598, 271, 260, 259, 62, 253, 638, 252, 423, 178,
	61, 375, 542, 640, 573, 648, 639, 634, 591, 666,
	663, 374, 194, 656, 669, 661, 71, 667, 545, 365,
	364, 590, 203, 70, 207, 670, 206, 33, 588, 587,
	339, 556, 336, 215, 329, 328, 67, 383, 541, 382,
	531, 72, 597, 294, 295, 212, 284, 22, 596, 637,
	22, 646, 75, 654, 236, 63, 641, 26, 198, 265,
	672, 304, 304, 673, 322, 247, 334, 635, 637, 357,
	370, 380, 388, 559, 408, 557, 417, 646, 555, 28,
	553, 552, 97, 574, 595, 654, 550, 542, 548, 547,
	248, 266, 239, 306, 306, 60, 324, 362, 335, 350,
	591, 358, 69, 402, 389, 401, 73, 101, 102, 103,
	571, 107, 275, 341, 111, 75, 68, 27, 412, 411,
	26, 150, 74, 541, 314, 535, 235, 234, 233, 232,
	647, 228, 655, 75, 35, 662, 195, 75, 26, 212,
	596, 123, 28, 327, 251, 533, 528, 565, 567, 527,
	226, 222, 75, 220, 447, 338, 647, 26, 148, 219,
	28, 75, 34, 665, 655, 51, 26, 347, 50, 160,
	38, 258, 274, 164, 37, 551, 595, 436, 196, 28,
	27, 30, 356, 186, 381, 75, 29, 410, 28, 173,
	26, 373, 265, 564, 643, 23, 36, 566, 21, 20,
	651, 562, 75, 19, 628, 18, 17, 26, 15, 400,
	14, 10, 28, 349, 348, 9, 563, 8, 5, 568,
	75, 2, 632, 237, 266, 26, 27, 1, 409, 28,
	304, 76, 145, 278, 85, 147, 75, 216, 418, 80,
	79, 26, 89, 77, 78, 81, 279, 28, 82, 322,
	27, 87, 217, 218, 0, 88, 83, 84, 437, 437,
	0, 334, 306, 28, 0, 0, 90, 27, 0, 91,
	0, 92, 216, 283, 86, 0, 0, 0, 0, 0,
	0, 324, 357, 0, 0, 27, 0, 558, 216, 296,
	0, 0, 0, 335, 0, 0, 576, 370, 258, 439,
	0, 27, 0, 0, 75, 274, 0, 380, 0, 26,
	0, 75, 0, 424, 358, 388, 26, 278, 85, 0,
	0, 0, 600, 80, 79, 0, 89, 77, 78, 81,
	279, 28, 82, 463, 408, 87, 0, 0, 28, 88,
	83, 84, 0, 0, 417, 0, 0, 389, 0, 0,
	90, 0, 0, 91, 75, 92, 216, 283, 86, 26,
	0, 0, 0, 480, 481, 0, 484, 278, 0, 27,
	0, 0, 0, 296, 558, 0, 27, 610, 0, 487,
	279, 28, 251, 0, 250, 0, 0, 0, 278, 0,
	281, 0, 0, 0, 0, 356, 0, 576, 0, 0,
	0, 279, 0, 0, 276, 277, 216, 283, 86, 0,
	0, 0, 0, 0, 600, 0, 437, 437, 0, 27,
	381, 0, 0, 497, 0, 0, 0, 0, 593, 86,
	0, 500, 501, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 642, 0, 650, 0, 658, 0, 0, 0,
	0, 0, 75, 0, 95, 0, 7, 26, 53, 0,
	31, 642, 0, 0, 0, 0, 85, 0, 0, 0,
	650, 80, 79, 56, 89, 77, 78, 81, 658, 28,
	82, 524, 0, 87, 0, 54, 55, 88, 83, 84,
	0, 0, 0, 516, 24, 25, 0, 0, 90, 0,
	0, 91, 0, 92, 0, 0, 86, 32, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 27, 0, 75,
	593, 0, 58, 7, 26, 53, 0, 31, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 59, 80, 79,
	56, 89, 77, 78, 81, 0, 28, 82, 0, 0,
	87, 0, 54, 55, 88, 83, 84, 0, 0, 0,
	0, 24, 25, 0, 0, 90, 0, 0, 91, 0,
	92, 0, 0, 86, 32, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 75, 0, 0, 58,
	0, 26, 0, 0, 0, 0, 0, 0, 280, 278,
	85, 281, 0, 0, 59, 80, 79, 0, 89, 77,
	78, 81, 279, 28, 82, 276, 277, 87, 0, 0,
	0, 88, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 614, 91, 0, 92, 216, 283,
	86, 75, 0, 502, 0, 0, 26, 623, 624, 625,
	250, 27, 0, 0, 278, 85, 0, 0, 0, 0,
	80, 79, 282, 89, 77, 78, 81, 279, 28, 82,
	0, 0, 87, 363, 0, 75, 88, 83, 84, 0,
	26, 0, 251, 0, 250, 0, 0, 90, 278, 0,
	91, 0, 92, 216, 283, 86, 0, 0, 0, 0,
	0, 279, 28, 0, 276, 277, 27, 75, 0, 458,
	75, 0, 26, 0, 251, 26, 250, 251, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 216, 283, 86,
	75, 0, 0, 0, 28, 26, 0, 28, 249, 250,
	27, 0, 0, 278, 85, 0, 0, 0, 0, 80,
	79, 282, 89, 77, 78, 81, 279, 28, 82, 0,
	0, 87, 363, 0, 0, 88, 83, 84, 0, 0,
	249, 0, 27, 249, 0, 27, 90, 0, 0, 91,
	75, 92, 216, 283, 86, 26, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 27, 0, 0, 0, 80,
	79, 0, 89, 77, 78, 81, 0, 28, 82, 0,
	0, 87, 0, 0, 0, 88, 83, 84, 0, 75,
	0, 0, 0, 0, 26, 0, 90, 0, 0, 91,
	0, 92, 216, 85, 86, 0, 0, 0, 80, 79,
	0, 89, 77, 78, 81, 27, 28, 82, 0, 0,
	87, 0, 0, 0, 88, 83, 84, 0, 75, 0,
	0, 0, 0, 26, 0, 90, 0, 0, 91, 0,
	92, 0, 85, 86, 0, 0, 0, 80, 79, 0,
	89, 0, 0, 81, 27, 28, 82, 0, 0, 87,
	363, 0, 0, 88, 83, 84, 251, 0, 250, 0,
	0, 0, 278, 0, 281, 0, 0, 0, 0, 0,
	216, 283, 0, 75, 0, 279, 0, 0, 276, 277,
	0, 0, 0, 27, 0, 0, 0, 85, 0, 0,
	0, 0, 80, 79, 0, 89, 77, 78, 81, 0,
	0, 82, 0, 86, 87, 0, 0, 0, 88, 83,
	84, 0, 249, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 91, 0, 92, 0, 0, 86,
}

var yyPact = [...]int16{
	38, -1000, 1152, 584, 579, 1085, -1000, 463, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 344, 463, 463, 463, -7, 463, 447,
	339, 463, 486, 445, 336, 439, 437, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 482, 571, 566, 563, 557, 463, 479,
	435, 434, 426, 425, 408, 402, 335, 245, 241, 399,
	396, 390, 381, 237, 234, 454, 1546, 552, 549, 546,
	542, 537, 536, 535, 533, 526, 463, 517, 508, 507,
	463, 502, 499, 380, 375, -1000, -1000, 92, -1000, -1000,
	748, 186, 184, 92, 215, 212, 209, 103, 417, -1000,
	685, 64, 196, 869, -1000, 553, 316, 49, -1000, -1000,
	-1000, -1000, -1000, 2, -1000, 1343, 1452, 1219, 937, 1308,
	1308, -1000, 987, -1000, 327, -1000, 74, 1363, 869, 1413,
	1491, -1000, 442, -1000, 818, 172, 374, -1000, 2, -1000,
	360, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2, -1000, -1000, -1000, 2, -1000, -1000, -1000, -1000, -1000,
	478, -1000, 418, 944, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 302, -1000, -1000, 477,
	-1000, -1000, -1000, -1000, -1000, 475, 428, -1000, 474, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 359, 869, -1000, -1000,
	-1000, -1000, -1000, 1546, 1546, -1000, 463, 371, 365, 358,
	553, -1000, -1000, -1000, -1000, -1000, 227, 468, 785, -1000,
	-1000, -1000, -1000, 345, 345, 345, -1000, 8, 354, 1340,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 226, 465,
	463, 494, 347, 1452, -1000, -1000, -1000, -1000, -1000, 331,
	1219, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 223, 268, 452, 37, 37,
	463, 463, -23, 463, 328, 937, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 463, 326, 1308, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 323, 322, 987, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 318, 327,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 222,
	463, 498, -1000, -1000, -1000, -1000, -1000, -1000, 463, 463,
	1274, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 89, 490, 307, 869, -1000, -1000, -1000, -1000,
	-1000, 1546, 1546, -1000, 301, 1413, -1000, -1000, -1000, -1000,
	-1000, -1000, 298, 1491, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 297, 442, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	463, 291, 818, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 278, -1000, -1000, -1000, -1000, 157, 143,
	-1000, -1000, 124, -1000, -1000, 267, 1546, -1000, 266, 92,
	-1000, -1000, -1000, -1000, -1000, 84, -1000, -1000, -1000, -1000,
	1522, -1000, -1000, 63, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 770, 63, 92, -1000, -1000, -1000, -1000, -1000, -1000,
	748, 119, 115, -1000, -1000, 102, 96, -1000, -1000, 88,
	92, 60, 63, 63, 2, -1000, -1000, 92, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 87, 2, -1000, -1000,
	92, 92, -1000, -1000, 937, -1000, -1000, -1000, 263, 259,
	-1000, -1000, -1000, -1000, -1000, -1000, 92, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 255, 84, -1000,
	-1000, -1000, -1000, -1000, 37, 1008, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 249, 770, -1000,
	-1000, 463, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 210,
	206, 185, 452, 37, 463, 463, 463, 431, 489, -1000,
	-1000, 835, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 71, 87, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 853, -1000, -1000, -1000, -1000, -1000, 85,
	-1000, -1000, -1000, -1000, 92, -1000, 524, -1000, 98, -1000,
	432, 81, 63, 2, 2, 2, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 766, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -14, 794, -1000, -1000, -1000, -1000, -1000,
	-1000, 452, 70, -1000, -1000, -1000, -1000, -1000, -1000, 452,
	-1000, -1000, -1000, -1000, 66, -1000, -1000, 63, -1000, -1000,
	63, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 17, 5, 875, 722, 872, 465, 871, 32, 867,
	861, 858, 461, 857, 855, 851, 72, 151, 0, 850,
	848, 83, 846, 845, 843, 839, 838, 684, 836, 835,
	829, 54, 826, 823, 51, 60, 821, 818, 53, 28,
	817, 814, 810, 44, 43, 38, 37, 36, 35, 93,
	31, 25, 24, 40, 808, 805, 802, 799, 793, 50,
	791, 790, 789, 786, 18, 785, 774, 771, 56, 769,
	768, 69, 767, 766, 765, 19, 23, 12, 26, 227,
	191, 41, 27, 122, 762, 759, 758, 13, 571, 756,
	753, 39, 10, 7, 752, 603, 750, 8, 746, 745,
	743, 15, 2, 742, 739, 34, 22, 737, 20, 735,
	732, 58, 730, 729, 728, 11, 726, 721, 720, 718,
	715, 713, 707, 14, 696, 695, 686, 9, 683, 681,
	679, 677, 33, 676, 675, 674, 45, 672, 670, 16,
	669, 668, 667, 666, 664, 48, 65, 29, 663, 660,
	659, 30, 656, 651, 641, 21, 640, 637, 635, 49,
	634, 633, 632, 47, 631, 52, 628, 626, 623, 46,
	620, 59, 614, 42, 609, 607, 599, 1, 594, 593,
	557, 4, 528,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 31, 31, 32, 33, 33, 21, 34, 34, 34,
	34, 34, 34, 34, 19, 36, 37, 37, 38, 38,
	38, 38, 38, 38, 20, 20, 35, 39, 39, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 40, 40, 24, 24, 56,
	57, 57, 58, 58, 59, 59, 59, 59, 60, 60,
	61, 62, 62, 63, 63, 64, 64, 64, 64, 65,
	25, 66, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 70, 72, 73, 71, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 55, 55, 84,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 49,
	49, 89, 90, 90, 91, 91, 91, 91, 91, 92,
	93, 88, 94, 95, 95, 96, 96, 97, 97, 97,
	97, 54, 54, 98, 99, 99, 100, 100, 101, 101,
	101, 101, 101, 101, 102, 50, 104, 104, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 103, 106,
	107, 41, 109, 110, 110, 111, 111, 111, 111, 111,
	111, 111, 3, 3, 78, 83, 83, 112, 113, 113,
	114, 114, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 121, 121, 121, 122, 122, 123, 123,
	123, 123, 123, 123, 124, 120, 17, 17, 17, 119,
	44, 125, 126, 126, 108, 108, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 129, 53, 130, 130,
	131, 131, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 133, 48,
	48, 134, 134, 135, 135, 136, 136, 136, 136, 136,
	136, 136, 136, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 137, 137, 140, 141, 141,
	23, 142, 143, 143, 144, 144, 145, 145, 145, 145,
	145, 145, 145, 146, 147, 51, 148, 149, 149, 150,
	150, 151, 151, 151, 151, 151, 151, 151, 52, 152,
	153, 153, 154, 154, 155, 155, 155, 155, 155, 42,
	156, 157, 157, 158, 158, 159, 159, 159, 159, 43,
	160, 161, 162, 162, 81, 81, 82, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	165, 165, 164, 77, 47, 47, 167, 168, 168, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 166, 166,
	45, 170, 171, 172, 172, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	80, 4, 4, 2, 2, 1, 1, 79, 46, 174,
	118, 118, 175, 176, 176, 177, 177, 177, 177, 177,
	178, 117, 117, 179, 180, 180, 181, 181, 181, 181,
	181, 182, 16, 18, 14, 15, 22, 76, 8, 8,
	6, 6, 7, 5, 5,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 3, 1, 3, 1,
	1, 1, 1, 1, 4, 2, 1, 2, 3, 1,
	1, 1, 1, 1, 2, 4, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 2, 1, 2, 1, 1, 1, 2, 2, 2,
	1, 3, 2, 2, 2, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 2, 2, 4, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 2, 0, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 2,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 2, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 3, 3, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 4,
	2, 1, 1, 2, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 2, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 2,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 3,
	3, 3, 3, 0, 1,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -32,
	-36, 15, 62, -142, -56, -66, -28, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -6, 13, 40, 41, 28, 64, 77, 92,
	-109, -156, -160, -125, -170, -174, -166, -133, -89, -103,
	-148, -152, -129, -98, -84, 7, -7, 30, 31, 27,
	26, 32, 35, 43, 44, 21, 61, 38, 42, 29,
	53, 56, 58, 4, 4, 9, -12, -4, 5, 10,
	8, -4, -4, -4, 73, 74, 75, -4, 8, 10,
	8, -4, 5, 8, 10, 8, 8, 8, 5, 4,
	4, 4, 4, -4, 5, 8, 8, 8, 8, 8,
	8, 10, 8, 10, 8, 10, 8, 8, 8, 8,
	8, 10, 8, 10, 8, -5, 5, -3, -4, 6,
	-27, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	-4, 4, 4, 4, -4, 4, 4, 8, 8, -8,
	55, 10, 8, -30, -31, -16, -17, -18, -6, 10,
	10, -8, 10, 10, 10, 10, -33, -34, -21, 13,
	-16, -17, -18, -35, -6, 91, -37, -38, 13, -16,
	-17, -18, -35, -6, 10, 10, -143, -144, -145, -16,
	-17, -18, -88, -146, -147, -6, 59, 23, 24, -57,
	-58, -59, -60, -16, -17, -18, -61, 65, -67, -68,
	-16, -18, -69, -70, -72, -73, -6, 78, -21, -110,
	-111, -83, -76, -16, -17, -18, -78, -6, -112, 70,
	16, 14, -157, -158, -159, -16, -17, -18, -27, -161,
	-162, -163, -16, -17, -18, -88, -95, -81, -82, -79,
	-80, -164, -77, -165, -27, -94, 36, 37, 20, 33,
	19, 22, 83, 60, -126, -108, -127, -16, -17, -18,
	-88, -95, -79, -80, -128, -27, 76, -171, -172, -173,
	-83, -16, -17, -18, -88, -49, -95, -76, -79, -165,
	-81, -82, -80, -78, -6, -171, -167, -168, -169, -16,
	-17, -18, -88, -49, -95, -79, -80, -6, -134, -135,
	-136, -16, -17, -18, -88, -95, -137, -53, -6, -138,
	51, -90, -91, -16, -18, -92, -93, -6, 88, 87,
	-104, -105, -16, -17, -18, -106, -27, -88, -95, -80,
	-78, -79, -107, 39, -149, -150, -151, -16, -17, -18,
	-88, -146, -147, -6, -153, -154, -155, -16, -17, -18,
	-88, -27, -130, -131, -132, -16, -17, -18, -88, -95,
	-43, -44, -45, -46, -47, -48, -50, -106, -51, -52,
	-6, -99, -100, -101, -16, -17, -18, -102, -88, -6,
	57, -85, -86, -87, -16, -17, -18, -88, -6, 10,
	8, 9, 5, -6, 9, -31, -34, 9, 5, 5,
	-38, 9, 5, 9, -145, -39, -40, -27, -39, -4,
	8, 8, 9, -59, 10, 8, 5, 9, -68, -71,
	8, -71, -71, 79, 81, 82, 80, 9, 9, -111,
	10, 8, 5, -4, 4, 9, -159, 9, -163, 10,
	8, -2, 52, 6, 5, -2, -1, 47, 48, -1,
	-4, -4, 84, 85, -4, 9, -127, -4, 9, -173,
	9, 9, -169, 9, -136, 10, 8, -4, 9, -91,
	-4, -4, 9, -105, 8, 4, 9, -151, -39, -39,
	9, -155, 9, -132, 9, -101, -4, 9, -87, 9,
	10, 10, 10, 9, -27, 9, -8, -62, -63, -64,
	-16, -17, -18, -65, 66, -74, -75, -76, -49, -77,
	-78, -79, -80, -81, -82, -83, -8, -113, -114, -115,
	-116, 45, -117, -118, -102, -119, -83, -120, -6, -121,
	-179, -175, 71, 86, 63, 17, 67, 18, 89, -8,
	-8, -96, -97, -16, -17, -18, -6, 10, 10, 10,
	10, 10, -8, 10, -8, -8, -8, -140, -141, -139,
	-16, -17, -18, -88, -78, -79, -80, -49, -81, -82,
	-6, -8, -8, -108, 9, 9, -8, 9, -64, -1,
	9, -75, 9, -115, -4, 10, 8, 10, 8, 10,
	8, -2, -1, -4, -4, -4, 5, 4, 9, -97,
	9, -139, 9, 10, -8, -122, -123, -16, -18, -92,
	-93, -124, -6, 68, -180, -181, -16, -17, -18, -182,
	-6, 46, -176, -177, -16, -17, -18, -178, -6, 90,
	10, -8, 9, -123, 69, 9, -181, -2, 9, -177,
	-2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 5, 0, 421, 25,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 312, 77, 80, 0, 0, 24, 33,
	45, 311, 79, 101, 22, 0, 351, 0, 242, 0,
	0, 384, 0, 279, 281, 139, 0, 0, 327, 340,
	258, 161, 164, 127, 130, 0, 421, 464, 202, 203,
	0, 192, 350, 360, 241, 401, 429, 398, 399, 278,
	141, 188, 326, 339, 256, 163, 129, 2, 3, 6,
	0, 458, 0, 0, 27, 29, 30, 31, 32, 454,
	455, 452, 236, 237, 238, 453, 0, 34, 37, 0,
	39, 40, 41, 42, 43, 0, 0, 46, 0, 49,
	50, 51, 52, 53, 36, 456, 0, 313, 314, 316,
	317, 318, 319, 57, 57, 322, 0, 0, 0, 0,
	81, 82, 84, 85, 86, 87, 0, 0, 0, 102,
	104, 105, 106, 0, 0, 0, 110, 0, 0, 0,
	193, 195, 196, 197, 198, 199, 200, 201, 0, 0,
	0, 0, 0, 352, 353, 355, 356, 357, 358, 0,
	361, 362, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 244, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 0, 0, 402, 403,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 0, 0, 386, 387, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 0, 282,
	283, 285, 286, 287, 288, 289, 290, 291, 292, 0,
	0, 0, 142, 144, 145, 146, 147, 148, 0, 0,
	0, 176, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 0, 0, 0, 328, 329, 331, 332, 333,
	334, 57, 57, 337, 0, 341, 342, 344, 345, 346,
	347, 348, 0, 259, 260, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 0, 165, 166, 168, 169, 170, 171, 172, 173,
	0, 0, 131, 132, 134, 135, 136, 137, 138, 460,
	462, 461, 422, 0, 26, 28, 35, 44, 0, 0,
	47, 55, 0, 310, 315, 0, 58, 75, 0, 0,
	323, 324, 78, 83, 88, 91, 90, 100, 103, 107,
	0, 108, 109, 0, 112, 113, 114, 23, 191, 194,
	205, 208, 0, 0, 207, 349, 354, 359, 363, 153,
	0, 0, 0, 423, 424, 0, 0, 425, 426, 0,
	0, 0, 0, 0, 152, 240, 245, 0, 400, 404,
	428, 385, 388, 280, 284, 305, 0, 293, 140, 143,
	0, 0, 175, 177, 0, 190, 325, 330, 0, 0,
	338, 343, 257, 261, 162, 167, 0, 128, 133, 459,
	38, 56, 48, 320, 76, 321, 151, 0, 92, 93,
	95, 96, 97, 98, 0, 0, 116, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 111, 0, 209, 210,
	212, 0, 214, 215, 216, 217, 218, 219, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 457,
	204, 0, 155, 157, 158, 159, 160, 364, 365, 366,
	427, 420, 382, 383, 380, 381, 255, 0, 307, 308,
	294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 149, 150, 0, 335, 336, 174, 89, 94, 0,
	115, 117, 206, 211, 0, 221, 0, 441, 0, 430,
	0, 0, 0, 223, 224, 225, 443, 432, 154, 156,
	306, 309, 189, 99, 213, 0, 226, 228, 229, 230,
	231, 232, 233, 0, 0, 444, 446, 447, 448, 449,
	450, 0, 0, 433, 435, 436, 437, 438, 439, 0,
	239, 235, 222, 227, 0, 442, 445, 0, 431, 434,
	0, 234, 451, 440,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.builder.Submodule(l.parent, yyDollar[2].token, l.featureSet))
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:237
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:246
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:251
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:260
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:263
		{
			yylex.(*lexer).stack.pop()
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:278
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:291
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:309
		{
			yylex.(*lexer).stack.pop()
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:314
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:335
		{
			yylex.(*lexer).stack.pop()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:338
		{
			yylex.(*lexer).stack.pop()
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:343
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			yylex.(*lexer).stack.pop()
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:377
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:382
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:404
		{
			yylex.(*lexer).stack.pop()
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:407
		{
			yylex.(*lexer).stack.pop()
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:412
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:434
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:443
		{
			yylex.(*lexer).stack.pop()
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:448
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:485
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:494
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:503
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:512
		{
			yylex.(*lexer).stack.pop()
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:535
		{
			yylex.(*lexer).stack.pop()
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			yylex.(*lexer).stack.pop()
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:570
		{
			yylex.(*lexer).stack.pop()
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:594
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:603
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:613
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:634
		{
			yylex.(*lexer).stack.pop()
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yylex.(*lexer).stack.pop()
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:680
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:689
		{
			yylex.(*lexer).stack.pop()
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:710
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:719
		{
			yylex.(*lexer).stack.pop()
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:724
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:733
		{
			yylex.(*lexer).stack.pop()
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:759
		{
			yyVAL.token = yyDollar[1].token
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.token = yyDollar[1].token
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:763
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yylex.(*lexer).stack.pop()
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:775
		{
			yylex.(*lexer).stack.pop()
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:780
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:813
		{
			yylex.(*lexer).stack.pop()
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:816
		{
			yylex.(*lexer).stack.pop()
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:821
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:828
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:835
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:855
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:861
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:875
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:884
		{
			yylex.(*lexer).stack.pop()
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:917
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:926
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:935
		{
			yylex.(*lexer).stack.pop()
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:974
		{
			yylex.(*lexer).stack.pop()
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:977
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:999
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1022
		{
			yylex.(*lexer).stack.pop()
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1025
		{
			yylex.(*lexer).stack.pop()
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1037
		{
			yylex.(*lexer).stack.pop()
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1062
		{
			yylex.(*lexer).stack.pop()
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1065
		{
			yylex.(*lexer).stack.pop()
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1071
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1080
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1092
		{
			yylex.(*lexer).stack.pop()
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1097
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1117
		{
			yylex.(*lexer).stack.pop()
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1120
		{
			yylex.(*lexer).stack.pop()
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1129
		{
			yylex.(*lexer).stack.pop()
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1134
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1158
		{
			yylex.(*lexer).stack.pop()
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1185
		{
			yylex.(*lexer).stack.pop()
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1190
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1207
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1214
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1248
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1255
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1264
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1273
		{
			l := yylex.(*lexer)
			l.builder.Unique(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1282
		{
			yylex.(*lexer).stack.pop()
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1285
		{
			yylex.(*lexer).stack.pop()
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1309
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1316
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1325
		{
			yylex.(*lexer).stack.pop()
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1330
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1366
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1375
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1378
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1383
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1391
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1402
		{
			yyVAL.boolean = true
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1403
		{
			yyVAL.boolean = false
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1406
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1418
		{
			yylex.(*lexer).stack.pop()
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1423
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1432
		{
			yylex.(*lexer).stack.pop()
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1435
		{
			yylex.(*lexer).stack.pop()
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1440
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1459
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1468
		{
			yylex.(*lexer).stack.pop()
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1471
		{
			yylex.(*lexer).stack.pop()
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1476
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1495
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1504
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1513
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1522
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1531
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1540
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1549
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.ext = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1561
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.stack.pop().(*meta.Extension)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1581
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			l.stack.push(yyVAL.ext)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1591
		{
			yyVAL.token = ""
		}
	}
	goto yystack /* stack new state and value */
}
